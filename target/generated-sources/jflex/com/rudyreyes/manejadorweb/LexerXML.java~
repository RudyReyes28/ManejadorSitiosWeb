// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/lexerEML.flex

package com.rudyreyes.manejadorweb;
import java.io.*;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class LexerXML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\u10fe\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\1\22\0\1\1\1\0"+
    "\1\3\1\0\1\4\10\0\1\5\1\0\1\6\1\7"+
    "\1\10\1\11\1\12\6\13\2\0\1\14\1\15\1\16"+
    "\2\0\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\2\30\1\46\1\0\1\47\1\0\1\50\1\0\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\2\30\265\0"+
    "\2\51\115\0\1\52\u0180\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\16\3\6\0\12\3\1\10\6\3\1\0\2\3\1\0"+
    "\1\3\1\0\1\3\10\0\1\11\1\10\4\0\4\3"+
    "\1\0\6\3\1\0\5\3\1\0\4\3\1\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\12\12\0\1\3\1\0"+
    "\3\3\1\0\2\3\1\0\2\3\1\0\2\3\1\0"+
    "\2\3\1\0\3\3\1\0\2\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\12\0\1\3\1\0"+
    "\3\3\1\0\1\13\1\3\1\0\1\3\2\14\1\15"+
    "\1\3\1\0\2\3\1\0\4\3\1\0\1\16\1\3"+
    "\1\0\1\3\2\17\1\20\1\3\1\0\1\3\1\0"+
    "\1\21\12\0\2\22\2\3\1\23\1\0\1\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\24\2\3\2\25\2\26"+
    "\1\3\2\27\1\3\3\0\1\30\7\0\2\3\1\0"+
    "\1\3\1\0\2\3\1\0\3\3\1\0\2\3\1\0"+
    "\2\3\6\0\1\31\4\0\2\3\1\0\2\32\2\3"+
    "\1\0\2\33\3\3\1\0\2\3\1\0\2\3\2\0"+
    "\1\34\1\0\1\35\4\0\2\3\1\0\2\36\2\3"+
    "\1\0\2\37\3\3\1\0\2\3\1\0\1\40\2\3"+
    "\3\0\1\41\4\0\1\3\2\42\2\3\1\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\2\43"+
    "\2\3\7\0\1\44\2\3\1\0\1\3\1\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\2\3"+
    "\3\0\1\45\1\46\1\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\2\47\1\3"+
    "\1\0\2\3\2\0\1\50\1\51\1\3\2\52\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\2\3\2\0\2\3\1\0\2\53\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\2\54\1\3"+
    "\1\0\1\3\1\0\1\3\2\55\1\3\1\0\2\56"+
    "\2\57\1\3\1\0\2\3\1\0\1\3\1\0\1\60"+
    "\2\61\1\3\1\0\1\3\1\0\2\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[455];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\53\0\126\0\53\0\201\0\53\0\53"+
    "\0\254\0\327\0\u0102\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9"+
    "\0\u0204\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331"+
    "\0\u035c\0\201\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e"+
    "\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\126\0\u058b"+
    "\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3"+
    "\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b"+
    "\0\u0866\0\u0891\0\u08bc\0\u08e7\0\53\0\53\0\u0912\0\u093d"+
    "\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95"+
    "\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed"+
    "\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45"+
    "\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\53"+
    "\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca"+
    "\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122"+
    "\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a"+
    "\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2"+
    "\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a"+
    "\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682"+
    "\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da"+
    "\0\u1805\0\u1830\0\u185b\0\u1886\0\126\0\u18b1\0\u18dc\0\u1907"+
    "\0\126\0\53\0\126\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de"+
    "\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\126\0\u1ae0\0\u1b0b"+
    "\0\u1b36\0\126\0\53\0\126\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2"+
    "\0\126\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f"+
    "\0\u1d3a\0\u1d65\0\u1d90\0\126\0\53\0\u1dbb\0\u1de6\0\126"+
    "\0\u1e11\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e"+
    "\0\u1f69\0\126\0\u1f94\0\u1fbf\0\126\0\53\0\126\0\53"+
    "\0\u1fea\0\126\0\53\0\u2015\0\u2040\0\u206b\0\u2096\0\53"+
    "\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u216d\0\u2198\0\u21c3\0\u21ee"+
    "\0\u2219\0\u2244\0\u226f\0\u229a\0\u22c5\0\u22f0\0\u231b\0\u2346"+
    "\0\u2371\0\u239c\0\u23c7\0\u23f2\0\u241d\0\u2448\0\u2473\0\u249e"+
    "\0\u24c9\0\u24f4\0\u251f\0\u254a\0\u2575\0\u25a0\0\53\0\u25cb"+
    "\0\u25f6\0\u2621\0\u264c\0\u2677\0\u26a2\0\u26cd\0\u26f8\0\u2723"+
    "\0\u274e\0\u2779\0\u27a4\0\u27cf\0\u27fa\0\u2825\0\u2850\0\u287b"+
    "\0\u28a6\0\u28d1\0\u28fc\0\u2927\0\u2952\0\u297d\0\u29a8\0\u29d3"+
    "\0\53\0\u29fe\0\53\0\u2a29\0\u2a54\0\u2a7f\0\u2aaa\0\u2ad5"+
    "\0\u2b00\0\u2b2b\0\126\0\53\0\u2b56\0\u2b81\0\u2bac\0\126"+
    "\0\53\0\u2bd7\0\u2c02\0\u2c2d\0\u2c58\0\u2c83\0\u2cae\0\u2cd9"+
    "\0\u2d04\0\u2d2f\0\u2d5a\0\u2d85\0\u2db0\0\u2ddb\0\53\0\u2e06"+
    "\0\u2e31\0\u2e5c\0\u2e87\0\u2eb2\0\126\0\53\0\u2edd\0\u2f08"+
    "\0\u2f33\0\u2f5e\0\u2f89\0\u2fb4\0\u2fdf\0\u300a\0\u3035\0\u3060"+
    "\0\u308b\0\u30b6\0\126\0\53\0\u30e1\0\u310c\0\u3137\0\u3162"+
    "\0\u318d\0\u31b8\0\u31e3\0\u320e\0\u3239\0\53\0\u3264\0\u328f"+
    "\0\u32ba\0\u32e5\0\u3310\0\u333b\0\u3366\0\u3391\0\u33bc\0\u33e7"+
    "\0\u3412\0\u343d\0\u3468\0\u3493\0\u34be\0\u34e9\0\u3514\0\u353f"+
    "\0\u356a\0\53\0\53\0\u3595\0\u35c0\0\u35eb\0\u3616\0\u3641"+
    "\0\u366c\0\u3697\0\u36c2\0\u36ed\0\u3718\0\u3743\0\u376e\0\126"+
    "\0\53\0\u3799\0\u37c4\0\u37ef\0\u381a\0\u3845\0\u3870\0\53"+
    "\0\53\0\u389b\0\126\0\53\0\u38c6\0\u38f1\0\u391c\0\u3947"+
    "\0\u3972\0\u399d\0\u39c8\0\u39f3\0\u3a1e\0\u3a49\0\u3a74\0\u3a9f"+
    "\0\u3aca\0\u3af5\0\u3b20\0\u3b4b\0\u3b76\0\126\0\53\0\u3ba1"+
    "\0\u3bcc\0\u3bf7\0\u3c22\0\u3c4d\0\u3c78\0\u3ca3\0\u3cce\0\u3cf9"+
    "\0\u3d24\0\u3d4f\0\u3d7a\0\u3da5\0\u3dd0\0\u3dfb\0\u3e26\0\u3e51"+
    "\0\126\0\53\0\u3e7c\0\u3ea7\0\u3ed2\0\u3efd\0\u3f28\0\126"+
    "\0\53\0\u3f53\0\u3f7e\0\126\0\53\0\126\0\53\0\u3fa9"+
    "\0\u3fd4\0\u3fff\0\u402a\0\u4055\0\u4080\0\u40ab\0\126\0\126"+
    "\0\53\0\u40d6\0\u4101\0\u412c\0\u4157\0\126\0\53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[455];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\2\4\1\5\5\0\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\4\1\14\1\15\2\4"+
    "\1\16\2\4\1\17\1\20\1\21\1\22\2\4\1\23"+
    "\1\24\1\25\1\26\2\4\1\27\1\0\1\4\1\30"+
    "\1\31\57\0\2\4\1\0\5\4\3\0\27\4\2\0"+
    "\1\4\3\0\1\32\4\0\1\33\14\0\1\34\33\0"+
    "\2\4\1\0\5\4\3\0\2\4\1\35\3\4\1\36"+
    "\3\4\1\37\1\4\1\40\5\4\1\41\4\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\15\4\1\42"+
    "\11\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\12\4\1\43\2\4\1\44\11\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\22\4\1\45\4\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\4\4\1\46"+
    "\22\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\3\4\1\47\23\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\15\4\1\50\11\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\15\4\1\51\5\4\1\52"+
    "\3\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\20\4\1\53\6\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\1\54\26\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\10\4\1\55\16\4\2\0\1\4"+
    "\1\56\5\0\2\4\1\0\5\4\3\0\4\4\1\57"+
    "\3\4\1\60\16\4\2\0\1\4\1\61\5\0\2\4"+
    "\1\0\5\4\3\0\21\4\1\62\5\4\2\0\1\4"+
    "\1\0\1\63\4\0\2\4\1\0\5\4\3\0\1\64"+
    "\26\4\2\0\1\4\2\0\4\65\2\66\1\65\5\67"+
    "\13\65\1\70\2\65\1\71\2\65\1\72\3\65\1\73"+
    "\1\65\1\74\2\65\1\0\1\75\1\66\1\70\1\65"+
    "\22\0\1\76\57\0\1\56\21\0\1\56\2\0\1\33"+
    "\15\0\1\77\3\0\1\100\11\0\1\101\56\0\1\102"+
    "\15\0\2\4\1\0\5\4\3\0\2\4\1\103\24\4"+
    "\2\0\1\4\6\0\2\4\1\0\5\4\3\0\20\4"+
    "\1\104\6\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\10\4\1\105\11\4\1\106\4\4\2\0\1\4"+
    "\1\107\5\0\2\4\1\0\5\4\3\0\2\4\1\110"+
    "\24\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\20\4\1\111\6\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\20\4\1\112\6\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\1\113\26\4\2\0\1\4"+
    "\6\0\2\4\1\0\5\4\3\0\12\4\1\114\14\4"+
    "\2\0\1\4\6\0\2\4\1\0\5\4\3\0\10\4"+
    "\1\115\16\4\2\0\1\4\1\116\5\0\2\4\1\0"+
    "\5\4\3\0\2\4\1\117\24\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\3\4\1\120\23\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\13\4\1\121"+
    "\13\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\4\4\1\122\22\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\10\4\1\123\16\4\2\0\1\4\1\124"+
    "\5\0\2\4\1\0\5\4\3\0\3\4\1\125\2\4"+
    "\1\126\11\4\1\127\6\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\22\4\1\130\4\4\2\0\1\4"+
    "\43\0\1\131\15\0\2\4\1\0\5\4\3\0\26\4"+
    "\1\132\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\22\4\1\133\4\4\2\0\1\4\43\0\1\134\15\0"+
    "\2\4\1\0\5\4\3\0\23\4\1\135\3\4\2\0"+
    "\1\4\44\0\1\136\14\0\2\4\1\0\5\4\3\0"+
    "\12\4\1\137\14\4\2\0\1\4\2\0\46\65\1\0"+
    "\1\75\7\65\2\66\1\65\5\66\3\65\27\66\1\0"+
    "\1\140\1\66\11\65\5\141\32\65\1\0\1\75\35\65"+
    "\1\142\13\65\1\0\1\75\26\65\1\143\22\65\1\0"+
    "\1\75\22\65\1\144\26\65\1\0\1\75\32\65\1\145"+
    "\16\65\1\0\1\75\1\65\1\145\30\65\1\146\16\65"+
    "\1\0\1\75\1\65\1\146\1\65\41\0\1\147\52\0"+
    "\1\150\30\0\1\151\62\0\1\152\21\0\1\152\5\0"+
    "\2\4\1\0\5\4\3\0\10\4\1\153\16\4\2\0"+
    "\1\4\1\154\5\0\2\4\1\0\5\4\3\0\4\4"+
    "\1\155\22\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\14\4\1\156\12\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\23\4\1\157\3\4\2\0\1\4"+
    "\35\0\1\160\23\0\2\4\1\0\5\4\3\0\7\4"+
    "\1\161\17\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\10\4\1\162\16\4\2\0\1\4\1\163\5\0"+
    "\2\4\1\0\5\4\3\0\20\4\1\164\6\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\21\4\1\165"+
    "\5\4\2\0\1\4\1\0\1\166\4\0\2\4\1\0"+
    "\5\4\3\0\15\4\1\167\11\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\17\4\1\170\7\4\2\0"+
    "\1\4\40\0\1\171\20\0\2\4\1\0\5\4\3\0"+
    "\7\4\1\172\17\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\10\4\1\173\16\4\2\0\1\4\1\174"+
    "\5\0\2\4\1\0\5\4\3\0\1\4\1\175\25\4"+
    "\2\0\1\4\6\0\2\4\1\0\5\4\3\0\24\4"+
    "\1\176\2\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\6\4\1\177\20\4\2\0\1\4\27\0\1\200"+
    "\31\0\2\4\1\0\5\4\3\0\20\4\1\201\6\4"+
    "\2\0\1\4\6\0\2\4\1\0\5\4\3\0\10\4"+
    "\1\202\16\4\2\0\1\4\1\203\5\0\2\4\1\0"+
    "\5\4\3\0\1\204\26\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\10\4\1\205\16\4\2\0\1\4"+
    "\1\206\30\0\1\206\21\0\1\206\5\0\2\4\1\0"+
    "\5\4\3\0\22\4\1\207\4\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\23\4\1\210\3\4\2\0"+
    "\1\4\44\0\1\211\14\0\2\4\1\0\5\4\3\0"+
    "\1\212\26\4\2\0\1\4\21\0\1\213\37\0\2\4"+
    "\1\0\5\4\3\0\15\4\1\214\11\4\2\0\1\4"+
    "\2\0\7\65\5\215\32\65\1\0\1\75\22\65\1\216"+
    "\26\65\1\0\1\75\36\65\1\217\12\65\1\0\1\75"+
    "\42\65\1\220\6\65\1\0\1\75\44\65\1\221\4\65"+
    "\1\0\1\75\25\65\1\222\23\65\1\0\1\75\3\65"+
    "\37\0\1\223\42\0\1\224\21\0\1\224\40\0\1\225"+
    "\51\0\1\226\20\0\2\4\1\0\5\4\3\0\15\4"+
    "\1\227\11\4\2\0\1\4\36\0\1\230\22\0\2\4"+
    "\1\0\5\4\3\0\6\4\1\231\20\4\2\0\1\4"+
    "\6\0\2\4\1\0\5\4\3\0\4\4\1\232\22\4"+
    "\2\0\1\4\6\0\2\4\1\0\5\4\3\0\20\4"+
    "\1\233\6\4\2\0\1\4\25\0\1\234\33\0\2\4"+
    "\1\0\5\4\3\0\15\4\1\235\11\4\2\0\1\4"+
    "\6\0\2\4\1\0\5\4\3\0\1\4\1\236\25\4"+
    "\2\0\1\4\22\0\1\237\36\0\2\4\1\0\5\4"+
    "\3\0\1\240\26\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\4\4\1\241\22\4\2\0\1\4\25\0"+
    "\1\242\33\0\2\4\1\0\5\4\3\0\20\4\1\243"+
    "\6\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\23\4\1\244\3\4\2\0\1\4\44\0\1\245\14\0"+
    "\2\4\1\0\5\4\3\0\1\246\26\4\2\0\1\4"+
    "\6\0\2\4\1\0\5\4\3\0\5\4\1\247\21\4"+
    "\2\0\1\4\26\0\1\250\32\0\2\4\1\0\5\4"+
    "\3\0\20\4\1\251\6\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\1\252\14\4\1\253\11\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\4\4\1\254"+
    "\22\4\2\0\1\4\25\0\1\255\33\0\2\4\1\0"+
    "\5\4\3\0\4\4\1\256\22\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\14\4\1\257\12\4\2\0"+
    "\1\4\35\0\1\260\23\0\2\4\1\0\5\4\3\0"+
    "\13\4\1\261\13\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\15\4\1\262\11\4\2\0\1\4\36\0"+
    "\1\263\22\0\2\4\1\0\5\4\3\0\15\4\1\264"+
    "\11\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\12\4\1\265\14\4\2\0\1\4\33\0\1\266\25\0"+
    "\2\4\1\0\5\4\3\0\20\4\1\267\6\4\2\0"+
    "\1\4\41\0\1\270\17\0\2\4\1\0\5\4\3\0"+
    "\20\4\1\271\6\4\2\0\1\4\2\0\7\65\5\272"+
    "\32\65\1\0\1\75\30\65\1\273\20\65\1\0\1\75"+
    "\45\65\1\274\3\65\1\0\1\75\42\65\1\275\6\65"+
    "\1\0\1\75\45\65\1\276\3\65\1\0\1\75\26\65"+
    "\1\277\22\65\1\0\1\75\3\65\27\0\1\300\21\0"+
    "\1\300\37\0\1\301\33\0\1\302\75\0\1\303\14\0"+
    "\2\4\1\0\5\4\3\0\14\4\1\304\12\4\2\0"+
    "\1\4\35\0\1\305\23\0\2\4\1\0\5\4\3\0"+
    "\1\306\26\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\1\307\26\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\1\310\26\4\2\0\1\4\21\0\1\311"+
    "\37\0\2\4\1\0\5\4\3\0\23\4\1\312\3\4"+
    "\2\0\1\4\44\0\1\313\14\0\2\4\1\0\5\4"+
    "\3\0\20\4\1\314\6\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\4\4\1\315\22\4\2\0\1\4"+
    "\25\0\1\316\33\0\2\4\1\0\5\4\3\0\27\4"+
    "\2\0\1\317\6\0\2\4\1\0\5\4\3\0\10\4"+
    "\1\320\16\4\2\0\1\4\1\321\30\0\1\321\21\0"+
    "\1\321\5\0\2\4\1\0\5\4\3\0\4\4\1\322"+
    "\22\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\27\4\2\0\1\323\6\0\2\4\1\0\5\4\3\0"+
    "\27\4\2\0\1\324\6\0\2\4\1\0\5\4\3\0"+
    "\14\4\1\325\12\4\2\0\1\4\35\0\1\326\23\0"+
    "\2\4\1\0\5\4\3\0\1\327\26\4\2\0\1\4"+
    "\21\0\1\330\37\0\2\4\1\0\5\4\3\0\4\4"+
    "\1\331\22\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\15\4\1\332\11\4\2\0\1\4\36\0\1\333"+
    "\22\0\2\4\1\0\5\4\3\0\10\4\1\334\16\4"+
    "\2\0\1\4\1\335\30\0\1\335\21\0\1\335\1\0"+
    "\5\65\1\336\40\65\1\0\1\75\26\65\1\337\22\65"+
    "\1\0\1\75\51\65\1\0\1\340\22\65\1\341\26\65"+
    "\1\0\1\75\34\65\1\342\14\65\1\0\1\75\37\65"+
    "\1\343\11\65\1\0\1\75\3\65\20\0\1\344\74\0"+
    "\1\345\42\0\1\346\43\0\1\347\33\0\2\4\1\0"+
    "\5\4\3\0\20\4\1\350\6\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\2\4\1\351\24\4\2\0"+
    "\1\4\23\0\1\352\35\0\2\4\1\0\5\4\3\0"+
    "\22\4\1\353\4\4\2\0\1\4\43\0\1\354\15\0"+
    "\2\4\1\0\5\4\3\0\27\4\2\0\1\355\6\0"+
    "\2\4\1\0\5\4\3\0\22\4\1\356\4\4\2\0"+
    "\1\4\43\0\1\357\15\0\2\4\1\0\5\4\3\0"+
    "\2\4\1\360\10\4\1\361\13\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\2\4\1\362\24\4\2\0"+
    "\1\4\23\0\1\363\35\0\2\4\1\0\5\4\3\0"+
    "\16\4\1\364\10\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\21\4\1\365\5\4\2\0\1\4\1\0"+
    "\1\366\4\0\2\4\1\0\5\4\3\0\22\4\1\367"+
    "\4\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\15\4\1\370\11\4\2\0\1\4\36\0\1\371\16\0"+
    "\7\65\1\372\1\373\35\65\1\0\1\75\36\65\1\374"+
    "\12\65\1\0\1\75\27\65\1\375\21\65\1\0\1\75"+
    "\37\65\1\376\11\65\1\0\1\75\51\65\1\0\1\377"+
    "\3\65\42\0\1\u0100\33\0\1\u0101\52\0\1\u0102\70\0"+
    "\1\u0103\15\0\2\4\1\0\5\4\3\0\27\4\2\0"+
    "\1\u0104\6\0\2\4\1\0\5\4\3\0\10\4\1\u0105"+
    "\16\4\2\0\1\4\1\u0106\30\0\1\u0106\21\0\1\u0106"+
    "\5\0\2\4\1\0\5\4\3\0\15\4\1\u0107\11\4"+
    "\2\0\1\4\36\0\1\u0108\22\0\2\4\1\0\5\4"+
    "\3\0\16\4\1\u0109\2\4\1\u010a\5\4\2\0\1\4"+
    "\1\0\1\u010b\4\0\2\4\1\0\5\4\3\0\1\u010c"+
    "\26\4\2\0\1\4\21\0\1\u010d\37\0\2\4\1\0"+
    "\5\4\3\0\20\4\1\u010e\6\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\15\4\1\u010f\11\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\1\u0110\26\4"+
    "\2\0\1\4\21\0\1\u0111\37\0\2\4\1\0\5\4"+
    "\3\0\1\u0112\26\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\10\4\1\u0113\16\4\2\0\1\4\1\u0114"+
    "\30\0\1\u0114\21\0\1\u0114\5\0\2\4\1\0\5\4"+
    "\3\0\20\4\1\u0115\6\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\27\4\2\0\1\u0116\52\0\1\u0117"+
    "\2\0\10\65\4\u0118\32\65\1\0\1\75\12\65\3\u0118"+
    "\34\65\1\0\1\75\51\65\1\0\1\u0119\37\65\1\u011a"+
    "\11\65\1\0\1\75\51\65\1\0\1\u011b\3\65\41\0"+
    "\1\u011c\52\0\1\u011d\52\0\1\u011e\30\0\1\u011f\37\0"+
    "\2\4\1\0\5\4\3\0\2\4\1\u0120\24\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\15\4\1\u0121"+
    "\11\4\2\0\1\4\36\0\1\u0122\22\0\2\4\1\0"+
    "\5\4\3\0\21\4\1\u0123\5\4\2\0\1\4\1\0"+
    "\1\u0124\40\0\1\u0124\11\0\1\u0124\4\0\2\4\1\0"+
    "\5\4\3\0\1\u0125\26\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\10\4\1\u0126\16\4\2\0\1\4"+
    "\1\u0127\30\0\1\u0127\21\0\1\u0127\5\0\2\4\1\0"+
    "\5\4\3\0\21\4\1\u0128\5\4\2\0\1\4\1\0"+
    "\1\u0129\40\0\1\u0129\11\0\1\u0129\4\0\2\4\1\0"+
    "\5\4\3\0\4\4\1\u012a\22\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\3\4\1\u012b\23\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\20\4\1\u012c"+
    "\6\4\2\0\1\4\41\0\1\u012d\17\0\2\4\1\0"+
    "\5\4\3\0\6\4\1\u012e\20\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\22\4\1\u012f\4\4\2\0"+
    "\1\4\43\0\1\u0130\15\0\2\4\1\0\5\4\3\0"+
    "\15\4\1\u0131\11\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\2\4\1\u0132\10\4\1\u0133\13\4\2\0"+
    "\1\4\23\0\1\u0134\10\0\1\u0135\20\0\5\65\1\u0136"+
    "\40\65\1\0\1\75\51\65\1\0\1\u0137\3\65\34\0"+
    "\1\u0138\35\0\1\u0139\72\0\1\u013a\53\0\1\u013b\11\0"+
    "\1\u013b\4\0\2\4\1\0\5\4\3\0\15\4\1\u013c"+
    "\11\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\14\4\1\u013d\12\4\2\0\1\4\35\0\1\u013e\23\0"+
    "\2\4\1\0\5\4\3\0\6\4\1\u013f\20\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\22\4\1\u0140"+
    "\4\4\2\0\1\4\43\0\1\u0141\15\0\2\4\1\0"+
    "\5\4\3\0\1\u0142\26\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\10\4\1\u0143\16\4\2\0\1\4"+
    "\1\u0144\5\0\2\4\1\0\5\4\3\0\27\4\2\0"+
    "\1\u0145\52\0\1\u0146\6\0\2\4\1\0\5\4\3\0"+
    "\10\4\1\u0147\16\4\2\0\1\4\1\u0148\5\0\2\4"+
    "\1\0\5\4\3\0\10\4\1\u0149\16\4\2\0\1\4"+
    "\1\u014a\30\0\1\u014a\21\0\1\u014a\5\0\2\4\1\0"+
    "\5\4\3\0\21\4\1\u014b\5\4\2\0\1\4\1\0"+
    "\1\u014c\4\0\2\4\1\0\5\4\3\0\20\4\1\u014d"+
    "\6\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\15\4\1\u014e\11\4\2\0\1\4\41\0\1\u014f\47\0"+
    "\1\u0150\16\0\7\65\3\u0151\1\u0152\33\65\1\0\1\75"+
    "\3\65\40\0\1\u0153\11\0\1\u0153\40\0\1\u0154\11\0"+
    "\1\u0154\34\0\1\u0155\17\0\1\u013b\14\0\1\u0156\40\0"+
    "\2\4\1\0\5\4\3\0\13\4\1\u0157\13\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\10\4\1\u0158"+
    "\16\4\2\0\1\4\1\u0159\5\0\2\4\1\0\5\4"+
    "\3\0\10\4\1\u015a\16\4\2\0\1\4\1\u015b\30\0"+
    "\1\u015b\21\0\1\u015b\5\0\2\4\1\0\5\4\3\0"+
    "\2\4\1\u015c\24\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\5\4\1\u015d\21\4\2\0\1\4\26\0"+
    "\1\u015e\32\0\2\4\1\0\5\4\3\0\16\4\1\u015f"+
    "\10\4\2\0\1\4\37\0\1\u0160\21\0\2\4\1\0"+
    "\5\4\3\0\14\4\1\u0161\12\4\2\0\1\4\35\0"+
    "\1\u0162\23\0\2\4\1\0\5\4\3\0\15\4\1\u0163"+
    "\11\4\2\0\1\4\36\0\1\u0164\22\0\2\4\1\0"+
    "\5\4\3\0\4\4\1\u0165\22\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\3\4\1\u0166\23\4\2\0"+
    "\1\4\25\0\1\u0167\51\0\1\u0168\30\0\10\65\4\u0169"+
    "\32\65\1\0\1\75\12\65\2\u0169\35\65\1\0\1\75"+
    "\3\65\1\0\1\u0153\14\0\1\u016a\35\0\1\u0154\14\0"+
    "\1\u016b\74\0\1\u016c\11\0\1\u016c\4\0\2\4\1\0"+
    "\5\4\3\0\16\4\1\u016d\10\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\14\4\1\u016e\12\4\2\0"+
    "\1\4\35\0\1\u016f\23\0\2\4\1\0\5\4\3\0"+
    "\15\4\1\u0170\11\4\2\0\1\4\36\0\1\u0171\22\0"+
    "\2\4\1\0\5\4\3\0\10\4\1\u0172\16\4\2\0"+
    "\1\4\1\u0173\5\0\2\4\1\0\5\4\3\0\10\4"+
    "\1\u0174\16\4\2\0\1\4\1\u0175\30\0\1\u0175\21\0"+
    "\1\u0175\5\0\2\4\1\0\5\4\3\0\1\u0176\26\4"+
    "\2\0\1\4\21\0\1\u0177\37\0\2\4\1\0\5\4"+
    "\3\0\1\u0178\26\4\2\0\1\4\21\0\1\u0179\37\0"+
    "\2\4\1\0\5\4\3\0\27\4\2\0\1\u017a\52\0"+
    "\1\u017b\6\0\2\4\1\0\5\4\3\0\1\u017c\26\4"+
    "\2\0\1\4\6\0\2\4\1\0\5\4\3\0\10\4"+
    "\1\u017d\16\4\2\0\1\4\1\u017e\20\0\1\u017f\62\0"+
    "\1\u017e\21\0\1\u017e\1\0\46\65\1\0\1\u0180\3\65"+
    "\1\0\1\u016c\14\0\1\u0181\40\0\2\4\1\0\5\4"+
    "\3\0\15\4\1\u0182\11\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\1\u0183\26\4\2\0\1\4\21\0"+
    "\1\u0184\37\0\2\4\1\0\5\4\3\0\27\4\2\0"+
    "\1\u0185\52\0\1\u0186\6\0\2\4\1\0\5\4\3\0"+
    "\15\4\1\u0187\11\4\2\0\1\4\36\0\1\u0188\22\0"+
    "\2\4\1\0\5\4\3\0\2\4\1\u0189\24\4\2\0"+
    "\1\4\23\0\1\u018a\35\0\2\4\1\0\5\4\3\0"+
    "\6\4\1\u018b\20\4\2\0\1\4\27\0\1\u018c\31\0"+
    "\2\4\1\0\5\4\3\0\25\4\1\u018d\1\4\2\0"+
    "\1\4\46\0\1\u018e\12\0\2\4\1\0\5\4\3\0"+
    "\2\4\1\u018f\24\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\5\4\1\u0190\21\4\2\0\1\4\26\0"+
    "\1\u0191\47\0\1\u0192\35\0\2\4\1\0\5\4\3\0"+
    "\14\4\1\u0193\12\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\25\4\1\u0194\1\4\2\0\1\4\46\0"+
    "\1\u0195\12\0\2\4\1\0\5\4\3\0\14\4\1\u0196"+
    "\12\4\2\0\1\4\35\0\1\u0197\23\0\2\4\1\0"+
    "\5\4\3\0\1\u0198\26\4\2\0\1\4\21\0\1\u0199"+
    "\37\0\2\4\1\0\5\4\3\0\10\4\1\u019a\16\4"+
    "\2\0\1\4\1\u019b\30\0\1\u019b\21\0\1\u019b\5\0"+
    "\2\4\1\0\5\4\3\0\4\4\1\u019c\22\4\2\0"+
    "\1\4\25\0\1\u019d\33\0\2\4\1\0\5\4\3\0"+
    "\10\4\1\u019e\16\4\2\0\1\4\1\u019f\5\0\2\4"+
    "\1\0\5\4\3\0\10\4\1\u01a0\16\4\2\0\1\4"+
    "\1\u01a1\30\0\1\u01a1\21\0\1\u01a1\30\0\1\u019f\21\0"+
    "\1\u019f\5\0\2\4\1\0\5\4\3\0\4\4\1\u01a2"+
    "\22\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\4\4\1\u01a3\22\4\2\0\1\4\25\0\1\u01a4\33\0"+
    "\2\4\1\0\5\4\3\0\2\4\1\u01a5\24\4\2\0"+
    "\1\4\23\0\1\u01a6\35\0\2\4\1\0\5\4\3\0"+
    "\14\4\1\u01a7\12\4\2\0\1\4\35\0\1\u01a8\23\0"+
    "\2\4\1\0\5\4\3\0\1\4\1\u01a9\25\4\2\0"+
    "\1\4\22\0\1\u01aa\36\0\2\4\1\0\5\4\3\0"+
    "\15\4\1\u01ab\11\4\2\0\1\4\36\0\1\u01ac\22\0"+
    "\2\4\1\0\5\4\3\0\2\4\1\u01ad\24\4\2\0"+
    "\1\4\23\0\1\u01ae\35\0\2\4\1\0\5\4\3\0"+
    "\14\4\1\u01af\12\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\1\4\1\u01b0\25\4\2\0\1\4\22\0"+
    "\1\u01b1\36\0\2\4\1\0\5\4\3\0\10\4\1\u01b2"+
    "\16\4\2\0\1\4\1\u01b3\30\0\1\u01b3\21\0\1\u01b3"+
    "\5\0\2\4\1\0\5\4\3\0\1\u01b4\26\4\2\0"+
    "\1\4\21\0\1\u01b5\37\0\2\4\1\0\5\4\3\0"+
    "\14\4\1\u01b6\12\4\2\0\1\4\35\0\1\u01b7\23\0"+
    "\2\4\1\0\5\4\3\0\1\u01b8\26\4\2\0\1\4"+
    "\21\0\1\u01b9\37\0\2\4\1\0\5\4\3\0\22\4"+
    "\1\u01ba\4\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\15\4\1\u01bb\11\4\2\0\1\4\36\0\1\u01bc"+
    "\22\0\2\4\1\0\5\4\3\0\2\4\1\u01bd\24\4"+
    "\2\0\1\4\23\0\1\u01be\35\0\2\4\1\0\5\4"+
    "\3\0\4\4\1\u01bf\22\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\14\4\1\u01c0\12\4\2\0\1\4"+
    "\35\0\1\u01c1\23\0\2\4\1\0\5\4\3\0\10\4"+
    "\1\u01c2\16\4\2\0\1\4\1\u01c3\30\0\1\u01c3\21\0"+
    "\1\u01c3\5\0\2\4\1\0\5\4\3\0\15\4\1\u01c4"+
    "\11\4\2\0\1\4\36\0\1\u01c5\22\0\2\4\1\0"+
    "\5\4\3\0\14\4\1\u01c6\12\4\2\0\1\4\35\0"+
    "\1\u01c7\17\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[16770];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\2\11\16\1\6\0"+
    "\21\1\1\0\2\1\1\0\1\1\1\0\1\1\10\0"+
    "\2\11\4\0\4\1\1\0\6\1\1\0\5\1\1\0"+
    "\4\1\1\0\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\12\0\1\1\1\0\3\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\3\1\1\0\2\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\12\0\1\1\1\0\3\1\1\0\2\1\1\0\2\1"+
    "\1\11\2\1\1\0\2\1\1\0\4\1\1\0\2\1"+
    "\1\0\2\1\1\11\2\1\1\0\1\1\1\0\1\1"+
    "\12\0\1\1\1\11\3\1\1\0\1\1\1\0\2\1"+
    "\1\0\2\1\1\0\4\1\1\11\1\1\1\11\2\1"+
    "\1\11\1\1\3\0\1\11\7\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\3\1\1\0\2\1\1\0\2\1"+
    "\6\0\1\11\4\0\2\1\1\0\4\1\1\0\5\1"+
    "\1\0\2\1\1\0\2\1\2\0\1\11\1\0\1\11"+
    "\4\0\2\1\1\0\1\1\1\11\2\1\1\0\1\1"+
    "\1\11\3\1\1\0\2\1\1\0\3\1\3\0\1\11"+
    "\4\0\2\1\1\11\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\2\1"+
    "\7\0\1\11\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\2\1\3\0"+
    "\2\11\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\2\1\2\0\2\11\2\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\2\0\2\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\2\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[455];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerXML(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbol(ParserXMLSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* ignore */
            }
          // fall through
          case 51: break;
          case 2:
            { return new Symbol(ParserXMLSym.COMILLA);
            }
          // fall through
          case 52: break;
          case 3:
            { return symbol(ParserXMLSym.DATOETIQUETA, yytext());
            }
          // fall through
          case 53: break;
          case 4:
            { return new Symbol(ParserXMLSym.DIAGONAL);
            }
          // fall through
          case 54: break;
          case 5:
            { return new Symbol(ParserXMLSym.MENOR);
            }
          // fall through
          case 55: break;
          case 6:
            { return new Symbol(ParserXMLSym.IGUAL);
            }
          // fall through
          case 56: break;
          case 7:
            { return new Symbol(ParserXMLSym.MAYOR);
            }
          // fall through
          case 57: break;
          case 8:
            { return new Symbol(ParserXMLSym.IDPARAM);
            }
          // fall through
          case 58: break;
          case 9:
            { return symbol(ParserXMLSym.LITERAL, yytext());
            }
          // fall through
          case 59: break;
          case 10:
            { return symbol(ParserXMLSym.VALORID, yytext());
            }
          // fall through
          case 60: break;
          case 11:
            { return new Symbol(ParserXMLSym.ANCHO);
            }
          // fall through
          case 61: break;
          case 12:
            { return new Symbol(ParserXMLSym.CLASE);
            }
          // fall through
          case 62: break;
          case 13:
            { return new Symbol(ParserXMLSym.COLOR);
            }
          // fall through
          case 63: break;
          case 14:
            { return new Symbol(ParserXMLSym.PADRE);
            }
          // fall through
          case 64: break;
          case 15:
            { return new Symbol(ParserXMLSym.SITIO);
            }
          // fall through
          case 65: break;
          case 16:
            { return new Symbol(ParserXMLSym.TEXTO);
            }
          // fall through
          case 66: break;
          case 17:
            { return new Symbol(ParserXMLSym.VALORETIQUETA);
            }
          // fall through
          case 67: break;
          case 18:
            { return new Symbol(ParserXMLSym.ACCION);
            }
          // fall through
          case 68: break;
          case 19:
            { return new Symbol(ParserXMLSym.ALTURA);
            }
          // fall through
          case 69: break;
          case 20:
            { return new Symbol(ParserXMLSym.NOMBRE);
            }
          // fall through
          case 70: break;
          case 21:
            { return new Symbol(ParserXMLSym.ORIGEN);
            }
          // fall through
          case 71: break;
          case 22:
            { return new Symbol(ParserXMLSym.PAGINA);
            }
          // fall through
          case 72: break;
          case 23:
            { return new Symbol(ParserXMLSym.TITULO);
            }
          // fall through
          case 73: break;
          case 24:
            { return new Symbol(ParserXMLSym.MENU);
            }
          // fall through
          case 74: break;
          case 25:
            { return new Symbol(ParserXMLSym.VIDEO);
            }
          // fall through
          case 75: break;
          case 26:
            { return new Symbol(ParserXMLSym.ATRIBUTO);
            }
          // fall through
          case 76: break;
          case 27:
            { return new Symbol(ParserXMLSym.ETIQUETA);
            }
          // fall through
          case 77: break;
          case 28:
            { return new Symbol(ParserXMLSym.IMAGEN);
            }
          // fall through
          case 78: break;
          case 29:
            { return new Symbol(ParserXMLSym.TITULOC);
            }
          // fall through
          case 79: break;
          case 30:
            { return new Symbol(ParserXMLSym.ATRIBUTOS);
            }
          // fall through
          case 80: break;
          case 31:
            { return new Symbol(ParserXMLSym.ETIQUETAS);
            }
          // fall through
          case 81: break;
          case 32:
            { return new Symbol(ParserXMLSym.PARAMETRO);
            }
          // fall through
          case 82: break;
          case 33:
            { return new Symbol(ParserXMLSym.PARRAFO);
            }
          // fall through
          case 83: break;
          case 34:
            { return new Symbol(ParserXMLSym.ALINEACION);
            }
          // fall through
          case 84: break;
          case 35:
            { return new Symbol(ParserXMLSym.PARAMETROS);
            }
          // fall through
          case 85: break;
          case 36:
            { return new Symbol(ParserXMLSym.CONTENIDOETIQUETA);
            }
          // fall through
          case 86: break;
          case 37:
            { return new Symbol(ParserXMLSym.ATRIBUTOSCIERRE);
            }
          // fall through
          case 87: break;
          case 38:
            { return new Symbol(ParserXMLSym.ETIQUETASCIERRE);
            }
          // fall through
          case 88: break;
          case 39:
            { return new Symbol(ParserXMLSym.NUEVAPAGINA);
            }
          // fall through
          case 89: break;
          case 40:
            { return symbol(ParserXMLSym.VALORFECHA, yytext());
            }
          // fall through
          case 90: break;
          case 41:
            { return new Symbol(ParserXMLSym.PARAMETROSCIERRE);
            }
          // fall through
          case 91: break;
          case 42:
            { return new Symbol(ParserXMLSym.BORRARPAGINA);
            }
          // fall through
          case 92: break;
          case 43:
            { return new Symbol(ParserXMLSym.FECHACREACION);
            }
          // fall through
          case 93: break;
          case 44:
            { return new Symbol(ParserXMLSym.CREARSITIO);
            }
          // fall through
          case 94: break;
          case 45:
            { return new Symbol(ParserXMLSym.BORRARSITIO);
            }
          // fall through
          case 95: break;
          case 46:
            { return new Symbol(ParserXMLSym.MODIFICARPAGINA);
            }
          // fall through
          case 96: break;
          case 47:
            { return new Symbol(ParserXMLSym.USUARIOCREACION);
            }
          // fall through
          case 97: break;
          case 48:
            { return new Symbol(ParserXMLSym.AGREGARCOMPONENTE);
            }
          // fall through
          case 98: break;
          case 49:
            { return new Symbol(ParserXMLSym.FECHAMODIFICACION);
            }
          // fall through
          case 99: break;
          case 50:
            { return new Symbol(ParserXMLSym.USUARIOMODIFICACION);
            }
          // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
