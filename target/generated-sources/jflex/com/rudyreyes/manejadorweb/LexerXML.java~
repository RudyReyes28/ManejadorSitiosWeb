// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/lexerEML.flex

package com.rudyreyes.manejadorweb;
import java.io.*;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class LexerXML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\u10fe\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\2\0\1\1\22\0\1\1\1\0\1\2"+
    "\1\0\1\3\10\0\1\4\1\0\1\5\1\6\1\7"+
    "\1\10\1\11\6\12\2\0\1\13\1\14\1\15\2\0"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\2\27"+
    "\1\45\1\0\1\46\1\0\1\47\1\0\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\2\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\2\27\265\0\2\50"+
    "\115\0\1\51\u0180\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\16\3\3\0\12\3\1\10\6\3\1\0\2\3\1\0"+
    "\1\3\1\0\1\3\10\0\1\11\1\10\4\3\1\0"+
    "\6\3\1\0\5\3\1\0\4\3\1\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\12\6\0\1\3\1\0\3\3"+
    "\1\0\2\3\1\0\2\3\1\0\2\3\1\0\2\3"+
    "\1\0\3\3\1\0\2\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\1\0\1\3\6\0\1\3\1\0\3\3"+
    "\1\0\1\13\1\3\1\0\1\3\2\14\1\15\1\3"+
    "\1\0\2\3\1\0\4\3\1\0\1\16\1\3\1\0"+
    "\1\3\2\17\1\20\1\3\1\0\1\3\1\0\1\21"+
    "\6\0\2\22\2\3\1\23\1\0\1\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\24\2\3\2\25\2\26\1\3"+
    "\2\27\1\3\3\0\1\30\3\0\1\3\1\0\2\3"+
    "\1\0\1\3\1\0\2\3\1\0\3\3\1\0\2\3"+
    "\1\0\2\3\6\0\1\31\2\32\2\3\1\0\2\33"+
    "\3\3\1\0\2\34\3\3\1\0\2\3\1\0\2\3"+
    "\2\0\1\35\1\0\1\36\2\3\1\0\2\37\3\3"+
    "\1\0\2\40\3\3\1\0\2\3\1\0\1\41\2\3"+
    "\3\0\1\42\1\3\2\43\3\3\1\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\2\44\2\3"+
    "\4\0\3\3\1\0\1\3\1\0\2\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\3\1\0\2\3\3\0\3\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\2\3"+
    "\2\0\2\45\1\3\1\0\2\3\2\0\1\46\2\3"+
    "\2\47\1\3\1\0\1\3\1\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\2\3\2\0\3\3\1\0\2\50"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\3\3\1\0\1\3\1\0\2\3\2\0"+
    "\2\51\1\3\1\0\1\3\1\0\2\3\2\52\1\3"+
    "\1\0\1\3\2\53\1\0\2\54\1\3\1\0\1\3"+
    "\1\55\1\3\1\0\1\3\1\0\1\3\1\0\1\56"+
    "\2\57\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\2\60\2\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\52\0\124\0\52\0\52\0\52\0\52"+
    "\0\176\0\250\0\322\0\374\0\u0126\0\u0150\0\u017a\0\u01a4"+
    "\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4"+
    "\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444"+
    "\0\u046e\0\u0498\0\u04c2\0\124\0\u04ec\0\u0516\0\u0540\0\u056a"+
    "\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba"+
    "\0\u06e4\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a"+
    "\0\u0834\0\52\0\52\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906"+
    "\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56"+
    "\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6"+
    "\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc\0\u0cf6"+
    "\0\52\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c"+
    "\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c"+
    "\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068\0\u1092\0\u10bc"+
    "\0\u10e6\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2\0\u120c"+
    "\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332\0\u135c"+
    "\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482\0\u14ac"+
    "\0\u14d6\0\u1500\0\u152a\0\u1554\0\u157e\0\124\0\u15a8\0\u15d2"+
    "\0\u15fc\0\124\0\52\0\124\0\u1626\0\u1650\0\u167a\0\u16a4"+
    "\0\u16ce\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\124\0\u17ca"+
    "\0\u17f4\0\u181e\0\124\0\52\0\124\0\u1848\0\u1872\0\u189c"+
    "\0\u18c6\0\124\0\u18f0\0\u191a\0\u1944\0\u196e\0\u1998\0\u19c2"+
    "\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\124\0\u1a94\0\u1abe\0\u1ae8"+
    "\0\u1b12\0\u1b3c\0\u1b66\0\u1b90\0\u1bba\0\u1be4\0\124\0\u1c0e"+
    "\0\u1c38\0\124\0\52\0\124\0\52\0\u1c62\0\124\0\52"+
    "\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a\0\52\0\u1d34\0\u1d5e\0\u1d88"+
    "\0\u1db2\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8"+
    "\0\u1f02\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe\0\u2028"+
    "\0\u2052\0\u207c\0\u20a6\0\u20d0\0\u20fa\0\u2124\0\u214e\0\u2178"+
    "\0\u21a2\0\52\0\124\0\52\0\u21cc\0\u21f6\0\u2220\0\u224a"+
    "\0\u2274\0\u229e\0\u22c8\0\u22f2\0\u231c\0\u2346\0\u2370\0\u239a"+
    "\0\u23c4\0\u23ee\0\u2418\0\u2442\0\u246c\0\u2496\0\u24c0\0\u24ea"+
    "\0\u2514\0\u253e\0\52\0\u2568\0\52\0\u2592\0\u25bc\0\u25e6"+
    "\0\124\0\52\0\u2610\0\u263a\0\u2664\0\u268e\0\124\0\52"+
    "\0\u26b8\0\u26e2\0\u270c\0\u2736\0\u2760\0\u278a\0\u27b4\0\u27de"+
    "\0\u2808\0\u2832\0\u285c\0\u2886\0\u28b0\0\52\0\u28da\0\124"+
    "\0\52\0\u2904\0\u292e\0\u2958\0\u2982\0\u29ac\0\u29d6\0\u2a00"+
    "\0\u2a2a\0\u2a54\0\u2a7e\0\u2aa8\0\u2ad2\0\u2afc\0\124\0\52"+
    "\0\u2b26\0\u2b50\0\u2b7a\0\u2ba4\0\u2bce\0\u2bf8\0\u2c22\0\u2c4c"+
    "\0\u2c76\0\u2ca0\0\u2cca\0\u2cf4\0\u2d1e\0\u2d48\0\u2d72\0\u2d9c"+
    "\0\u2dc6\0\u2df0\0\u2e1a\0\u2e44\0\u2e6e\0\u2e98\0\u2ec2\0\u2eec"+
    "\0\u2f16\0\u2f40\0\u2f6a\0\u2f94\0\u2fbe\0\u2fe8\0\u3012\0\u303c"+
    "\0\u3066\0\u3090\0\u30ba\0\u30e4\0\u310e\0\u3138\0\u3162\0\u318c"+
    "\0\u31b6\0\u31e0\0\124\0\52\0\u320a\0\u3234\0\u325e\0\u3288"+
    "\0\u32b2\0\u32dc\0\52\0\u3306\0\u3330\0\124\0\52\0\u335a"+
    "\0\u3384\0\u33ae\0\u33d8\0\u3402\0\u342c\0\u3456\0\u3480\0\u34aa"+
    "\0\u34d4\0\u34fe\0\u3528\0\u3552\0\u357c\0\u35a6\0\u35d0\0\u35fa"+
    "\0\u3624\0\u364e\0\u3678\0\124\0\52\0\u36a2\0\u36cc\0\u36f6"+
    "\0\u3720\0\u374a\0\u3774\0\u379e\0\u37c8\0\u37f2\0\u381c\0\u3846"+
    "\0\u3870\0\u389a\0\u38c4\0\u38ee\0\u3918\0\u3942\0\u396c\0\u3996"+
    "\0\u39c0\0\u39ea\0\u3a14\0\124\0\52\0\u3a3e\0\u3a68\0\u3a92"+
    "\0\u3abc\0\u3ae6\0\u3b10\0\124\0\52\0\u3b3a\0\u3b64\0\u3b8e"+
    "\0\124\0\52\0\u3bb8\0\124\0\52\0\u3be2\0\u3c0c\0\u3c36"+
    "\0\124\0\u3c60\0\u3c8a\0\u3cb4\0\u3cde\0\u3d08\0\u3d32\0\124"+
    "\0\124\0\52\0\u3d5c\0\u3d86\0\u3db0\0\u3dda\0\u3e04\0\u3e2e"+
    "\0\u3e58\0\u3e82\0\124\0\52\0\124\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\2\4\1\5\5\0\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\4\1\14\1\15\2\4"+
    "\1\16\2\4\1\17\1\20\1\21\1\22\2\4\1\23"+
    "\1\24\1\25\1\26\2\4\1\27\1\0\1\4\1\30"+
    "\1\31\55\0\2\4\1\0\5\4\3\0\27\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\2\4\1\32"+
    "\3\4\1\33\3\4\1\34\1\4\1\35\5\4\1\36"+
    "\4\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\15\4\1\37\11\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\12\4\1\40\2\4\1\41\11\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\22\4\1\42"+
    "\4\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\4\4\1\43\22\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\3\4\1\44\23\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\15\4\1\45\11\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\15\4\1\46"+
    "\5\4\1\47\3\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\20\4\1\50\6\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\1\51\26\4\2\0\1\4"+
    "\5\0\2\4\1\0\5\4\3\0\10\4\1\52\16\4"+
    "\2\0\1\4\1\53\4\0\2\4\1\0\5\4\3\0"+
    "\4\4\1\54\3\4\1\55\16\4\2\0\1\4\1\56"+
    "\4\0\2\4\1\0\5\4\3\0\21\4\1\57\5\4"+
    "\2\0\1\4\1\0\1\60\3\0\2\4\1\0\5\4"+
    "\3\0\1\61\26\4\2\0\1\4\2\0\3\62\2\63"+
    "\1\62\5\64\13\62\1\65\2\62\1\66\2\62\1\67"+
    "\3\62\1\70\1\62\1\71\2\62\1\0\1\72\1\63"+
    "\1\65\1\62\21\0\1\73\56\0\1\53\21\0\1\53"+
    "\4\0\2\4\1\0\5\4\3\0\2\4\1\74\24\4"+
    "\2\0\1\4\5\0\2\4\1\0\5\4\3\0\20\4"+
    "\1\75\6\4\2\0\1\4\5\0\2\4\1\0\5\4"+
    "\3\0\10\4\1\76\11\4\1\77\4\4\2\0\1\4"+
    "\1\100\4\0\2\4\1\0\5\4\3\0\2\4\1\101"+
    "\24\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\20\4\1\102\6\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\20\4\1\103\6\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\1\104\26\4\2\0\1\4"+
    "\5\0\2\4\1\0\5\4\3\0\12\4\1\105\14\4"+
    "\2\0\1\4\5\0\2\4\1\0\5\4\3\0\10\4"+
    "\1\106\16\4\2\0\1\4\1\107\4\0\2\4\1\0"+
    "\5\4\3\0\2\4\1\110\24\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\3\4\1\111\23\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\13\4\1\112"+
    "\13\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\4\4\1\113\22\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\10\4\1\114\16\4\2\0\1\4\1\115"+
    "\4\0\2\4\1\0\5\4\3\0\3\4\1\116\2\4"+
    "\1\117\11\4\1\120\6\4\2\0\1\4\5\0\2\4"+
    "\1\0\5\4\3\0\22\4\1\121\4\4\2\0\1\4"+
    "\42\0\1\122\14\0\2\4\1\0\5\4\3\0\26\4"+
    "\1\123\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\22\4\1\124\4\4\2\0\1\4\42\0\1\125\14\0"+
    "\2\4\1\0\5\4\3\0\23\4\1\126\3\4\2\0"+
    "\1\4\43\0\1\127\13\0\2\4\1\0\5\4\3\0"+
    "\12\4\1\130\14\4\2\0\1\4\2\0\45\62\1\0"+
    "\1\72\6\62\2\63\1\62\5\63\3\62\27\63\1\0"+
    "\1\131\1\63\10\62\5\132\32\62\1\0\1\72\34\62"+
    "\1\133\13\62\1\0\1\72\25\62\1\134\22\62\1\0"+
    "\1\72\21\62\1\135\26\62\1\0\1\72\31\62\1\136"+
    "\16\62\1\0\1\72\1\62\1\136\27\62\1\137\16\62"+
    "\1\0\1\72\1\62\1\137\1\62\3\0\2\4\1\0"+
    "\5\4\3\0\10\4\1\140\16\4\2\0\1\4\1\141"+
    "\4\0\2\4\1\0\5\4\3\0\4\4\1\142\22\4"+
    "\2\0\1\4\5\0\2\4\1\0\5\4\3\0\14\4"+
    "\1\143\12\4\2\0\1\4\5\0\2\4\1\0\5\4"+
    "\3\0\23\4\1\144\3\4\2\0\1\4\34\0\1\145"+
    "\22\0\2\4\1\0\5\4\3\0\7\4\1\146\17\4"+
    "\2\0\1\4\5\0\2\4\1\0\5\4\3\0\10\4"+
    "\1\147\16\4\2\0\1\4\1\150\4\0\2\4\1\0"+
    "\5\4\3\0\20\4\1\151\6\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\21\4\1\152\5\4\2\0"+
    "\1\4\1\0\1\153\3\0\2\4\1\0\5\4\3\0"+
    "\15\4\1\154\11\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\17\4\1\155\7\4\2\0\1\4\37\0"+
    "\1\156\17\0\2\4\1\0\5\4\3\0\7\4\1\157"+
    "\17\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\10\4\1\160\16\4\2\0\1\4\1\161\4\0\2\4"+
    "\1\0\5\4\3\0\1\4\1\162\25\4\2\0\1\4"+
    "\5\0\2\4\1\0\5\4\3\0\24\4\1\163\2\4"+
    "\2\0\1\4\5\0\2\4\1\0\5\4\3\0\6\4"+
    "\1\164\20\4\2\0\1\4\26\0\1\165\30\0\2\4"+
    "\1\0\5\4\3\0\20\4\1\166\6\4\2\0\1\4"+
    "\5\0\2\4\1\0\5\4\3\0\10\4\1\167\16\4"+
    "\2\0\1\4\1\170\4\0\2\4\1\0\5\4\3\0"+
    "\1\171\26\4\2\0\1\4\5\0\2\4\1\0\5\4"+
    "\3\0\10\4\1\172\16\4\2\0\1\4\1\173\27\0"+
    "\1\173\21\0\1\173\4\0\2\4\1\0\5\4\3\0"+
    "\22\4\1\174\4\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\23\4\1\175\3\4\2\0\1\4\43\0"+
    "\1\176\13\0\2\4\1\0\5\4\3\0\1\177\26\4"+
    "\2\0\1\4\20\0\1\200\36\0\2\4\1\0\5\4"+
    "\3\0\15\4\1\201\11\4\2\0\1\4\2\0\6\62"+
    "\5\202\32\62\1\0\1\72\21\62\1\203\26\62\1\0"+
    "\1\72\35\62\1\204\12\62\1\0\1\72\41\62\1\205"+
    "\6\62\1\0\1\72\43\62\1\206\4\62\1\0\1\72"+
    "\24\62\1\207\23\62\1\0\1\72\3\62\3\0\2\4"+
    "\1\0\5\4\3\0\15\4\1\210\11\4\2\0\1\4"+
    "\35\0\1\211\21\0\2\4\1\0\5\4\3\0\6\4"+
    "\1\212\20\4\2\0\1\4\5\0\2\4\1\0\5\4"+
    "\3\0\4\4\1\213\22\4\2\0\1\4\5\0\2\4"+
    "\1\0\5\4\3\0\20\4\1\214\6\4\2\0\1\4"+
    "\24\0\1\215\32\0\2\4\1\0\5\4\3\0\15\4"+
    "\1\216\11\4\2\0\1\4\5\0\2\4\1\0\5\4"+
    "\3\0\1\4\1\217\25\4\2\0\1\4\21\0\1\220"+
    "\35\0\2\4\1\0\5\4\3\0\1\221\26\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\4\4\1\222"+
    "\22\4\2\0\1\4\24\0\1\223\32\0\2\4\1\0"+
    "\5\4\3\0\20\4\1\224\6\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\23\4\1\225\3\4\2\0"+
    "\1\4\43\0\1\226\13\0\2\4\1\0\5\4\3\0"+
    "\1\227\26\4\2\0\1\4\5\0\2\4\1\0\5\4"+
    "\3\0\5\4\1\230\21\4\2\0\1\4\25\0\1\231"+
    "\31\0\2\4\1\0\5\4\3\0\20\4\1\232\6\4"+
    "\2\0\1\4\5\0\2\4\1\0\5\4\3\0\1\233"+
    "\14\4\1\234\11\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\4\4\1\235\22\4\2\0\1\4\24\0"+
    "\1\236\32\0\2\4\1\0\5\4\3\0\4\4\1\237"+
    "\22\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\14\4\1\240\12\4\2\0\1\4\34\0\1\241\22\0"+
    "\2\4\1\0\5\4\3\0\13\4\1\242\13\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\15\4\1\243"+
    "\11\4\2\0\1\4\35\0\1\244\21\0\2\4\1\0"+
    "\5\4\3\0\15\4\1\245\11\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\12\4\1\246\14\4\2\0"+
    "\1\4\32\0\1\247\24\0\2\4\1\0\5\4\3\0"+
    "\20\4\1\250\6\4\2\0\1\4\40\0\1\251\16\0"+
    "\2\4\1\0\5\4\3\0\20\4\1\252\6\4\2\0"+
    "\1\4\2\0\6\62\5\253\32\62\1\0\1\72\27\62"+
    "\1\254\20\62\1\0\1\72\44\62\1\255\3\62\1\0"+
    "\1\72\41\62\1\256\6\62\1\0\1\72\44\62\1\257"+
    "\3\62\1\0\1\72\25\62\1\260\22\62\1\0\1\72"+
    "\3\62\3\0\2\4\1\0\5\4\3\0\14\4\1\261"+
    "\12\4\2\0\1\4\34\0\1\262\22\0\2\4\1\0"+
    "\5\4\3\0\1\263\26\4\2\0\1\4\5\0\2\4"+
    "\1\0\5\4\3\0\1\264\26\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\1\265\26\4\2\0\1\4"+
    "\20\0\1\266\36\0\2\4\1\0\5\4\3\0\23\4"+
    "\1\267\3\4\2\0\1\4\43\0\1\270\13\0\2\4"+
    "\1\0\5\4\3\0\20\4\1\271\6\4\2\0\1\4"+
    "\5\0\2\4\1\0\5\4\3\0\4\4\1\272\22\4"+
    "\2\0\1\4\24\0\1\273\32\0\2\4\1\0\5\4"+
    "\3\0\27\4\2\0\1\274\5\0\2\4\1\0\5\4"+
    "\3\0\10\4\1\275\16\4\2\0\1\4\1\276\27\0"+
    "\1\276\21\0\1\276\4\0\2\4\1\0\5\4\3\0"+
    "\4\4\1\277\22\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\27\4\2\0\1\300\5\0\2\4\1\0"+
    "\5\4\3\0\27\4\2\0\1\301\5\0\2\4\1\0"+
    "\5\4\3\0\14\4\1\302\12\4\2\0\1\4\34\0"+
    "\1\303\22\0\2\4\1\0\5\4\3\0\1\304\26\4"+
    "\2\0\1\4\20\0\1\305\36\0\2\4\1\0\5\4"+
    "\3\0\4\4\1\306\22\4\2\0\1\4\5\0\2\4"+
    "\1\0\5\4\3\0\15\4\1\307\11\4\2\0\1\4"+
    "\35\0\1\310\21\0\2\4\1\0\5\4\3\0\10\4"+
    "\1\311\16\4\2\0\1\4\1\312\27\0\1\312\21\0"+
    "\1\312\1\0\4\62\1\313\40\62\1\0\1\72\25\62"+
    "\1\314\22\62\1\0\1\72\50\62\1\0\1\315\21\62"+
    "\1\316\26\62\1\0\1\72\33\62\1\317\14\62\1\0"+
    "\1\72\36\62\1\320\11\62\1\0\1\72\3\62\3\0"+
    "\2\4\1\0\5\4\3\0\4\4\1\321\22\4\2\0"+
    "\1\4\24\0\1\322\32\0\2\4\1\0\5\4\3\0"+
    "\20\4\1\323\6\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\2\4\1\324\24\4\2\0\1\4\22\0"+
    "\1\325\34\0\2\4\1\0\5\4\3\0\22\4\1\326"+
    "\4\4\2\0\1\4\42\0\1\327\14\0\2\4\1\0"+
    "\5\4\3\0\27\4\2\0\1\330\5\0\2\4\1\0"+
    "\5\4\3\0\22\4\1\331\4\4\2\0\1\4\42\0"+
    "\1\332\14\0\2\4\1\0\5\4\3\0\2\4\1\333"+
    "\10\4\1\334\13\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\2\4\1\335\24\4\2\0\1\4\22\0"+
    "\1\336\34\0\2\4\1\0\5\4\3\0\16\4\1\337"+
    "\10\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\21\4\1\340\5\4\2\0\1\4\1\0\1\341\3\0"+
    "\2\4\1\0\5\4\3\0\22\4\1\342\4\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\15\4\1\343"+
    "\11\4\2\0\1\4\35\0\1\344\16\0\6\62\1\345"+
    "\1\346\35\62\1\0\1\72\35\62\1\347\12\62\1\0"+
    "\1\72\26\62\1\350\21\62\1\0\1\72\36\62\1\351"+
    "\11\62\1\0\1\72\50\62\1\0\1\352\3\62\3\0"+
    "\2\4\1\0\5\4\3\0\21\4\1\353\5\4\2\0"+
    "\1\4\1\0\1\354\37\0\1\354\11\0\1\354\3\0"+
    "\2\4\1\0\5\4\3\0\27\4\2\0\1\355\5\0"+
    "\2\4\1\0\5\4\3\0\10\4\1\356\16\4\2\0"+
    "\1\4\1\357\27\0\1\357\21\0\1\357\4\0\2\4"+
    "\1\0\5\4\3\0\15\4\1\360\11\4\2\0\1\4"+
    "\35\0\1\361\21\0\2\4\1\0\5\4\3\0\2\4"+
    "\1\362\13\4\1\363\2\4\1\364\5\4\2\0\1\4"+
    "\1\0\1\365\3\0\2\4\1\0\5\4\3\0\1\366"+
    "\26\4\2\0\1\4\20\0\1\367\36\0\2\4\1\0"+
    "\5\4\3\0\20\4\1\370\6\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\15\4\1\371\11\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\1\372\26\4"+
    "\2\0\1\4\20\0\1\373\36\0\2\4\1\0\5\4"+
    "\3\0\1\374\26\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\10\4\1\375\16\4\2\0\1\4\1\376"+
    "\27\0\1\376\21\0\1\376\4\0\2\4\1\0\5\4"+
    "\3\0\20\4\1\377\6\4\2\0\1\4\5\0\2\4"+
    "\1\0\5\4\3\0\27\4\2\0\1\u0100\51\0\1\u0101"+
    "\2\0\7\62\4\u0102\32\62\1\0\1\72\11\62\3\u0102"+
    "\34\62\1\0\1\72\50\62\1\0\1\u0103\36\62\1\u0104"+
    "\11\62\1\0\1\72\50\62\1\0\1\u0105\3\62\3\0"+
    "\2\4\1\0\5\4\3\0\2\4\1\u0106\24\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\15\4\1\u0107"+
    "\11\4\2\0\1\4\35\0\1\u0108\21\0\2\4\1\0"+
    "\5\4\3\0\21\4\1\u0109\5\4\2\0\1\4\1\0"+
    "\1\u010a\37\0\1\u010a\11\0\1\u010a\3\0\2\4\1\0"+
    "\5\4\3\0\15\4\1\u010b\11\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\1\u010c\26\4\2\0\1\4"+
    "\5\0\2\4\1\0\5\4\3\0\10\4\1\u010d\16\4"+
    "\2\0\1\4\1\u010e\27\0\1\u010e\21\0\1\u010e\4\0"+
    "\2\4\1\0\5\4\3\0\21\4\1\u010f\5\4\2\0"+
    "\1\4\1\0\1\u0110\37\0\1\u0110\11\0\1\u0110\3\0"+
    "\2\4\1\0\5\4\3\0\4\4\1\u0111\22\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\3\4\1\u0112"+
    "\23\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\20\4\1\u0113\6\4\2\0\1\4\40\0\1\u0114\16\0"+
    "\2\4\1\0\5\4\3\0\6\4\1\u0115\20\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\22\4\1\u0116"+
    "\4\4\2\0\1\4\42\0\1\u0117\14\0\2\4\1\0"+
    "\5\4\3\0\15\4\1\u0118\11\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\2\4\1\u0119\10\4\1\u011a"+
    "\13\4\2\0\1\4\22\0\1\u011b\10\0\1\u011c\20\0"+
    "\4\62\1\u011d\40\62\1\0\1\72\50\62\1\0\1\u011e"+
    "\3\62\3\0\2\4\1\0\5\4\3\0\15\4\1\u011f"+
    "\11\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\14\4\1\u0120\12\4\2\0\1\4\34\0\1\u0121\22\0"+
    "\2\4\1\0\5\4\3\0\13\4\1\u0122\13\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\6\4\1\u0123"+
    "\20\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\22\4\1\u0124\4\4\2\0\1\4\42\0\1\u0125\14\0"+
    "\2\4\1\0\5\4\3\0\1\u0126\26\4\2\0\1\4"+
    "\5\0\2\4\1\0\5\4\3\0\10\4\1\u0127\16\4"+
    "\2\0\1\4\1\u0128\4\0\2\4\1\0\5\4\3\0"+
    "\27\4\2\0\1\u0129\51\0\1\u012a\5\0\2\4\1\0"+
    "\5\4\3\0\10\4\1\u012b\16\4\2\0\1\4\1\u012c"+
    "\4\0\2\4\1\0\5\4\3\0\10\4\1\u012d\16\4"+
    "\2\0\1\4\1\u012e\27\0\1\u012e\21\0\1\u012e\4\0"+
    "\2\4\1\0\5\4\3\0\21\4\1\u012f\5\4\2\0"+
    "\1\4\1\0\1\u0130\3\0\2\4\1\0\5\4\3\0"+
    "\20\4\1\u0131\6\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\15\4\1\u0132\11\4\2\0\1\4\40\0"+
    "\1\u0133\46\0\1\u0134\16\0\6\62\3\u0135\1\u0136\33\62"+
    "\1\0\1\72\3\62\3\0\2\4\1\0\5\4\3\0"+
    "\13\4\1\u0137\13\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\16\4\1\u0138\10\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\10\4\1\u0139\16\4\2\0"+
    "\1\4\1\u013a\4\0\2\4\1\0\5\4\3\0\10\4"+
    "\1\u013b\16\4\2\0\1\4\1\u013c\27\0\1\u013c\21\0"+
    "\1\u013c\4\0\2\4\1\0\5\4\3\0\2\4\1\u013d"+
    "\24\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\5\4\1\u013e\21\4\2\0\1\4\25\0\1\u013f\31\0"+
    "\2\4\1\0\5\4\3\0\2\4\1\u0140\13\4\1\u0141"+
    "\10\4\2\0\1\4\22\0\1\u0142\13\0\1\u0143\20\0"+
    "\2\4\1\0\5\4\3\0\14\4\1\u0144\12\4\2\0"+
    "\1\4\34\0\1\u0145\22\0\2\4\1\0\5\4\3\0"+
    "\15\4\1\u0146\11\4\2\0\1\4\35\0\1\u0147\21\0"+
    "\2\4\1\0\5\4\3\0\4\4\1\u0148\22\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\3\4\1\u0149"+
    "\23\4\2\0\1\4\24\0\1\u014a\50\0\1\u014b\30\0"+
    "\7\62\4\u014c\32\62\1\0\1\72\11\62\2\u014c\35\62"+
    "\1\0\1\72\3\62\3\0\2\4\1\0\5\4\3\0"+
    "\16\4\1\u014d\10\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\15\4\1\u014e\11\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\14\4\1\u014f\12\4\2\0"+
    "\1\4\34\0\1\u0150\22\0\2\4\1\0\5\4\3\0"+
    "\15\4\1\u0151\11\4\2\0\1\4\35\0\1\u0152\21\0"+
    "\2\4\1\0\5\4\3\0\10\4\1\u0153\16\4\2\0"+
    "\1\4\1\u0154\4\0\2\4\1\0\5\4\3\0\10\4"+
    "\1\u0155\16\4\2\0\1\4\1\u0156\27\0\1\u0156\21\0"+
    "\1\u0156\4\0\2\4\1\0\5\4\3\0\15\4\1\u0157"+
    "\11\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\1\u0158\26\4\2\0\1\4\35\0\1\u0159\34\0\1\u015a"+
    "\36\0\2\4\1\0\5\4\3\0\1\u015b\26\4\2\0"+
    "\1\4\20\0\1\u015c\36\0\2\4\1\0\5\4\3\0"+
    "\27\4\2\0\1\u015d\51\0\1\u015e\5\0\2\4\1\0"+
    "\5\4\3\0\1\u015f\26\4\2\0\1\4\5\0\2\4"+
    "\1\0\5\4\3\0\10\4\1\u0160\16\4\2\0\1\4"+
    "\1\u0161\17\0\1\u0162\61\0\1\u0161\21\0\1\u0161\1\0"+
    "\45\62\1\0\1\u0163\3\62\3\0\2\4\1\0\5\4"+
    "\3\0\15\4\1\u0164\11\4\2\0\1\4\5\0\2\4"+
    "\1\0\5\4\3\0\14\4\1\u0165\12\4\2\0\1\4"+
    "\5\0\2\4\1\0\5\4\3\0\1\u0166\26\4\2\0"+
    "\1\4\20\0\1\u0167\36\0\2\4\1\0\5\4\3\0"+
    "\27\4\2\0\1\u0168\51\0\1\u0169\5\0\2\4\1\0"+
    "\5\4\3\0\15\4\1\u016a\11\4\2\0\1\4\35\0"+
    "\1\u016b\21\0\2\4\1\0\5\4\3\0\2\4\1\u016c"+
    "\24\4\2\0\1\4\22\0\1\u016d\34\0\2\4\1\0"+
    "\5\4\3\0\13\4\1\u016e\13\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\6\4\1\u016f\20\4\2\0"+
    "\1\4\33\0\1\u0170\44\0\1\u0171\30\0\2\4\1\0"+
    "\5\4\3\0\25\4\1\u0172\1\4\2\0\1\4\45\0"+
    "\1\u0173\11\0\2\4\1\0\5\4\3\0\2\4\1\u0174"+
    "\24\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\5\4\1\u0175\21\4\2\0\1\4\25\0\1\u0176\46\0"+
    "\1\u0177\34\0\2\4\1\0\5\4\3\0\14\4\1\u0178"+
    "\12\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\4\4\1\u0179\22\4\2\0\1\4\5\0\2\4\1\0"+
    "\5\4\3\0\25\4\1\u017a\1\4\2\0\1\4\45\0"+
    "\1\u017b\11\0\2\4\1\0\5\4\3\0\14\4\1\u017c"+
    "\12\4\2\0\1\4\34\0\1\u017d\22\0\2\4\1\0"+
    "\5\4\3\0\1\u017e\26\4\2\0\1\4\20\0\1\u017f"+
    "\36\0\2\4\1\0\5\4\3\0\16\4\1\u0180\10\4"+
    "\2\0\1\4\5\0\2\4\1\0\5\4\3\0\10\4"+
    "\1\u0181\16\4\2\0\1\4\1\u0182\35\0\1\u0183\43\0"+
    "\1\u0182\21\0\1\u0182\4\0\2\4\1\0\5\4\3\0"+
    "\4\4\1\u0184\22\4\2\0\1\4\24\0\1\u0185\32\0"+
    "\2\4\1\0\5\4\3\0\10\4\1\u0186\16\4\2\0"+
    "\1\4\1\u0187\4\0\2\4\1\0\5\4\3\0\10\4"+
    "\1\u0188\16\4\2\0\1\4\1\u0189\27\0\1\u0189\21\0"+
    "\1\u0189\27\0\1\u0187\21\0\1\u0187\4\0\2\4\1\0"+
    "\5\4\3\0\4\4\1\u018a\22\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\14\4\1\u018b\12\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\4\4\1\u018c"+
    "\22\4\2\0\1\4\24\0\1\u018d\32\0\2\4\1\0"+
    "\5\4\3\0\2\4\1\u018e\24\4\2\0\1\4\22\0"+
    "\1\u018f\34\0\2\4\1\0\5\4\3\0\15\4\1\u0190"+
    "\11\4\2\0\1\4\5\0\2\4\1\0\5\4\3\0"+
    "\14\4\1\u0191\12\4\2\0\1\4\34\0\1\u0192\52\0"+
    "\1\u0193\21\0\2\4\1\0\5\4\3\0\1\4\1\u0194"+
    "\25\4\2\0\1\4\21\0\1\u0195\35\0\2\4\1\0"+
    "\5\4\3\0\15\4\1\u0196\11\4\2\0\1\4\35\0"+
    "\1\u0197\21\0\2\4\1\0\5\4\3\0\2\4\1\u0198"+
    "\24\4\2\0\1\4\22\0\1\u0199\34\0\2\4\1\0"+
    "\5\4\3\0\14\4\1\u019a\12\4\2\0\1\4\5\0"+
    "\2\4\1\0\5\4\3\0\22\4\1\u019b\4\4\2\0"+
    "\1\4\5\0\2\4\1\0\5\4\3\0\1\4\1\u019c"+
    "\25\4\2\0\1\4\21\0\1\u019d\35\0\2\4\1\0"+
    "\5\4\3\0\10\4\1\u019e\16\4\2\0\1\4\1\u019f"+
    "\27\0\1\u019f\21\0\1\u019f\4\0\2\4\1\0\5\4"+
    "\3\0\14\4\1\u01a0\12\4\2\0\1\4\5\0\2\4"+
    "\1\0\5\4\3\0\1\u01a1\26\4\2\0\1\4\20\0"+
    "\1\u01a2\65\0\1\u01a3\22\0\2\4\1\0\5\4\3\0"+
    "\14\4\1\u01a4\12\4\2\0\1\4\34\0\1\u01a5\22\0"+
    "\2\4\1\0\5\4\3\0\1\u01a6\26\4\2\0\1\4"+
    "\20\0\1\u01a7\36\0\2\4\1\0\5\4\3\0\22\4"+
    "\1\u01a8\4\4\2\0\1\4\5\0\2\4\1\0\5\4"+
    "\3\0\4\4\1\u01a9\22\4\2\0\1\4\5\0\2\4"+
    "\1\0\5\4\3\0\15\4\1\u01aa\11\4\2\0\1\4"+
    "\35\0\1\u01ab\21\0\2\4\1\0\5\4\3\0\4\4"+
    "\1\u01ac\22\4\2\0\1\4\24\0\1\u01ad\32\0\2\4"+
    "\1\0\5\4\3\0\2\4\1\u01ae\24\4\2\0\1\4"+
    "\22\0\1\u01af\34\0\2\4\1\0\5\4\3\0\4\4"+
    "\1\u01b0\22\4\2\0\1\4\5\0\2\4\1\0\5\4"+
    "\3\0\14\4\1\u01b1\12\4\2\0\1\4\34\0\1\u01b2"+
    "\22\0\2\4\1\0\5\4\3\0\14\4\1\u01b3\12\4"+
    "\2\0\1\4\34\0\1\u01b4\22\0\2\4\1\0\5\4"+
    "\3\0\10\4\1\u01b5\16\4\2\0\1\4\1\u01b6\27\0"+
    "\1\u01b6\21\0\1\u01b6\4\0\2\4\1\0\5\4\3\0"+
    "\22\4\1\u01b7\4\4\2\0\1\4\42\0\1\u01b8\14\0"+
    "\2\4\1\0\5\4\3\0\15\4\1\u01b9\11\4\2\0"+
    "\1\4\35\0\1\u01ba\21\0\2\4\1\0\5\4\3\0"+
    "\4\4\1\u01bb\22\4\2\0\1\4\24\0\1\u01bc\32\0"+
    "\2\4\1\0\5\4\3\0\14\4\1\u01bd\12\4\2\0"+
    "\1\4\34\0\1\u01be\17\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[16044];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\4\11\16\1\3\0\21\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\10\0\2\11\4\1"+
    "\1\0\6\1\1\0\5\1\1\0\4\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\11\6\0\1\1\1\0"+
    "\3\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\3\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\6\0\1\1\1\0"+
    "\3\1\1\0\2\1\1\0\2\1\1\11\2\1\1\0"+
    "\2\1\1\0\4\1\1\0\2\1\1\0\2\1\1\11"+
    "\2\1\1\0\1\1\1\0\1\1\6\0\5\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\4\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\3\0\1\11\3\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\3\1\1\0\2\1\1\0\2\1\6\0\1\11\1\1"+
    "\1\11\2\1\1\0\5\1\1\0\5\1\1\0\2\1"+
    "\1\0\2\1\2\0\1\11\1\0\1\11\2\1\1\0"+
    "\1\1\1\11\3\1\1\0\1\1\1\11\3\1\1\0"+
    "\2\1\1\0\3\1\3\0\1\11\2\1\1\11\3\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\2\1\4\0\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\2\0\1\1\1\0\1\1"+
    "\1\0\2\1\3\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\2\0\1\1\1\11\1\1"+
    "\1\0\2\1\2\0\1\11\3\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\2\0\1\1\1\0"+
    "\2\1\2\0\3\1\1\0\1\1\1\11\1\1\1\0"+
    "\2\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\1\1\0\2\1\2\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\3\1\1\11\1\1\1\0"+
    "\2\1\1\11\1\0\1\1\1\11\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[446];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerXML(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbol(ParserXMLSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* ignore */
            }
          // fall through
          case 50: break;
          case 2:
            { return new Symbol(ParserXMLSym.COMILLA);
            }
          // fall through
          case 51: break;
          case 3:
            { return symbol(ParserXMLSym.DATOETIQUETA, yytext());
            }
          // fall through
          case 52: break;
          case 4:
            { return new Symbol(ParserXMLSym.DIAGONAL);
            }
          // fall through
          case 53: break;
          case 5:
            { return new Symbol(ParserXMLSym.MENOR);
            }
          // fall through
          case 54: break;
          case 6:
            { return new Symbol(ParserXMLSym.IGUAL);
            }
          // fall through
          case 55: break;
          case 7:
            { return new Symbol(ParserXMLSym.MAYOR);
            }
          // fall through
          case 56: break;
          case 8:
            { return new Symbol(ParserXMLSym.IDPARAM);
            }
          // fall through
          case 57: break;
          case 9:
            { return symbol(ParserXMLSym.LITERAL, yytext());
            }
          // fall through
          case 58: break;
          case 10:
            { return symbol(ParserXMLSym.VALORID, yytext());
            }
          // fall through
          case 59: break;
          case 11:
            { return new Symbol(ParserXMLSym.ANCHO);
            }
          // fall through
          case 60: break;
          case 12:
            { return new Symbol(ParserXMLSym.CLASE);
            }
          // fall through
          case 61: break;
          case 13:
            { return new Symbol(ParserXMLSym.COLOR);
            }
          // fall through
          case 62: break;
          case 14:
            { return new Symbol(ParserXMLSym.PADRE);
            }
          // fall through
          case 63: break;
          case 15:
            { return new Symbol(ParserXMLSym.SITIO);
            }
          // fall through
          case 64: break;
          case 16:
            { return new Symbol(ParserXMLSym.TEXTO);
            }
          // fall through
          case 65: break;
          case 17:
            { return new Symbol(ParserXMLSym.VALORETIQUETA);
            }
          // fall through
          case 66: break;
          case 18:
            { return new Symbol(ParserXMLSym.ACCION);
            }
          // fall through
          case 67: break;
          case 19:
            { return new Symbol(ParserXMLSym.ALTURA);
            }
          // fall through
          case 68: break;
          case 20:
            { return new Symbol(ParserXMLSym.NOMBRE);
            }
          // fall through
          case 69: break;
          case 21:
            { return new Symbol(ParserXMLSym.ORIGEN);
            }
          // fall through
          case 70: break;
          case 22:
            { return new Symbol(ParserXMLSym.PAGINA);
            }
          // fall through
          case 71: break;
          case 23:
            { return new Symbol(ParserXMLSym.TITULO);
            }
          // fall through
          case 72: break;
          case 24:
            { return new Symbol(ParserXMLSym.MENU);
            }
          // fall through
          case 73: break;
          case 25:
            { return new Symbol(ParserXMLSym.VIDEO);
            }
          // fall through
          case 74: break;
          case 26:
            { return new Symbol(ParserXMLSym.ACCIONES);
            }
          // fall through
          case 75: break;
          case 27:
            { return new Symbol(ParserXMLSym.ATRIBUTO);
            }
          // fall through
          case 76: break;
          case 28:
            { return new Symbol(ParserXMLSym.ETIQUETA);
            }
          // fall through
          case 77: break;
          case 29:
            { return new Symbol(ParserXMLSym.IMAGEN);
            }
          // fall through
          case 78: break;
          case 30:
            { return new Symbol(ParserXMLSym.TITULOC);
            }
          // fall through
          case 79: break;
          case 31:
            { return new Symbol(ParserXMLSym.ATRIBUTOS);
            }
          // fall through
          case 80: break;
          case 32:
            { return new Symbol(ParserXMLSym.ETIQUETAS);
            }
          // fall through
          case 81: break;
          case 33:
            { return new Symbol(ParserXMLSym.PARAMETRO);
            }
          // fall through
          case 82: break;
          case 34:
            { return new Symbol(ParserXMLSym.PARRAFO);
            }
          // fall through
          case 83: break;
          case 35:
            { return new Symbol(ParserXMLSym.ALINEACION);
            }
          // fall through
          case 84: break;
          case 36:
            { return new Symbol(ParserXMLSym.PARAMETROS);
            }
          // fall through
          case 85: break;
          case 37:
            { return new Symbol(ParserXMLSym.NUEVAPAGINA);
            }
          // fall through
          case 86: break;
          case 38:
            { return symbol(ParserXMLSym.VALORFECHA, yytext());
            }
          // fall through
          case 87: break;
          case 39:
            { return new Symbol(ParserXMLSym.BORRARPAGINA);
            }
          // fall through
          case 88: break;
          case 40:
            { return new Symbol(ParserXMLSym.FECHACREACION);
            }
          // fall through
          case 89: break;
          case 41:
            { return new Symbol(ParserXMLSym.CREARSITIO);
            }
          // fall through
          case 90: break;
          case 42:
            { return new Symbol(ParserXMLSym.BORRARSITIO);
            }
          // fall through
          case 91: break;
          case 43:
            { return new Symbol(ParserXMLSym.MODIFICARPAGINA);
            }
          // fall through
          case 92: break;
          case 44:
            { return new Symbol(ParserXMLSym.USUARIOCREACION);
            }
          // fall through
          case 93: break;
          case 45:
            { return new Symbol(ParserXMLSym.ELIMINARCOMPONENTE);
            }
          // fall through
          case 94: break;
          case 46:
            { return new Symbol(ParserXMLSym.AGREGARCOMPONENTE);
            }
          // fall through
          case 95: break;
          case 47:
            { return new Symbol(ParserXMLSym.FECHAMODIFICACION);
            }
          // fall through
          case 96: break;
          case 48:
            { return new Symbol(ParserXMLSym.MODIFICARCOMPONENTE);
            }
          // fall through
          case 97: break;
          case 49:
            { return new Symbol(ParserXMLSym.USUARIOMODIFICACION);
            }
          // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
