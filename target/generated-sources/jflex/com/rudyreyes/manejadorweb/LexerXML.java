// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/lexerEML.flex

package com.rudyreyes.manejadorweb;
import java.io.*;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class LexerXML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\u10fe\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\1\22\0\1\1\1\0"+
    "\1\3\1\0\1\4\10\0\1\5\1\0\1\6\1\7"+
    "\1\10\1\11\1\12\6\13\2\0\1\14\1\15\1\16"+
    "\2\0\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\3\30"+
    "\1\45\1\0\1\46\1\0\1\47\1\0\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\3\30\265\0\2\50\115\0"+
    "\1\51\u0180\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\13\3\6\0\4\3\1\10\4\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\3\0\1\11\1\10\3\0\3\3"+
    "\1\0\6\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\12\4\0\1\3\1\0\2\3\1\0\6\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\4\0\1\3\1\0"+
    "\2\3\1\0\4\3\1\13\1\3\2\14\1\3\1\0"+
    "\1\3\1\0\1\15\4\0\2\16\2\3\1\0\1\3"+
    "\1\17\3\3\2\20\1\3\5\0\2\3\1\0\4\3"+
    "\1\0\2\3\6\0\1\3\1\0\2\21\4\3\1\0"+
    "\2\3\5\0\1\3\1\0\4\3\1\0\1\22\2\3"+
    "\6\0\1\3\1\0\2\3\1\0\1\3\1\0\1\3"+
    "\1\0\2\23\2\3\6\0\1\24\1\3\1\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\2\3\3\0\1\25"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\2\26"+
    "\1\3\1\0\2\3\2\0\1\27\1\30\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\2\31\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\2\32"+
    "\1\3\1\0\1\3\1\0\2\33\1\3\1\0\2\34"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\2\35\1\3"+
    "\1\0\1\3\1\0\2\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\52\0\124\0\52\0\176\0\52\0\52"+
    "\0\250\0\322\0\374\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce"+
    "\0\u01f8\0\u0222\0\u024c\0\u0276\0\u02a0\0\u02ca\0\176\0\u02f4"+
    "\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6\0\124\0\u03f0\0\u041a"+
    "\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a"+
    "\0\u0594\0\u05be\0\u05e8\0\52\0\52\0\u0612\0\u063c\0\u0666"+
    "\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6"+
    "\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906"+
    "\0\52\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c"+
    "\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c"+
    "\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc"+
    "\0\u0cf6\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c"+
    "\0\u0e46\0\u0e70\0\u0e9a\0\124\0\u0ec4\0\124\0\52\0\u0eee"+
    "\0\u0f18\0\u0f42\0\u0f6c\0\124\0\u0f96\0\u0fc0\0\u0fea\0\u1014"+
    "\0\124\0\52\0\u103e\0\u1068\0\u1092\0\u10bc\0\124\0\u10e6"+
    "\0\u1110\0\u113a\0\124\0\52\0\u1164\0\u118e\0\u11b8\0\u11e2"+
    "\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332"+
    "\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482"+
    "\0\u14ac\0\u14d6\0\u1500\0\u152a\0\124\0\52\0\u1554\0\u157e"+
    "\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650\0\u167a\0\u16a4\0\u16ce"+
    "\0\u16f8\0\u1722\0\u174c\0\u1776\0\u17a0\0\u17ca\0\u17f4\0\u181e"+
    "\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944\0\u196e"+
    "\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\u1a94\0\u1abe"+
    "\0\u1ae8\0\u1b12\0\u1b3c\0\124\0\52\0\u1b66\0\u1b90\0\u1bba"+
    "\0\u1be4\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c\0\52\0\u1cb6\0\u1ce0"+
    "\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88\0\u1db2\0\u1ddc\0\u1e06\0\u1e30"+
    "\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8\0\52\0\u1f02\0\u1f2c\0\u1f56"+
    "\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe\0\124\0\52\0\u2028\0\u2052"+
    "\0\u207c\0\u20a6\0\u20d0\0\u20fa\0\52\0\52\0\u2124\0\u214e"+
    "\0\u2178\0\u21a2\0\u21cc\0\u21f6\0\u2220\0\u224a\0\u2274\0\u229e"+
    "\0\u22c8\0\u22f2\0\u231c\0\u2346\0\124\0\52\0\u2370\0\u239a"+
    "\0\u23c4\0\u23ee\0\u2418\0\u2442\0\u246c\0\u2496\0\u24c0\0\u24ea"+
    "\0\u2514\0\u253e\0\124\0\52\0\u2568\0\u2592\0\u25bc\0\u25e6"+
    "\0\124\0\52\0\u2610\0\u263a\0\124\0\52\0\u2664\0\u268e"+
    "\0\u26b8\0\u26e2\0\u270c\0\u2736\0\124\0\52\0\u2760\0\u278a"+
    "\0\u27b4\0\u27de\0\124\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\2\4\1\5\5\0\1\6\1\7"+
    "\1\10\1\11\1\12\2\4\1\13\1\14\2\4\1\15"+
    "\3\4\1\16\1\4\1\17\2\4\1\20\1\21\1\22"+
    "\1\23\1\4\1\24\1\0\1\4\1\25\1\26\56\0"+
    "\2\4\1\0\5\4\3\0\26\4\2\0\1\4\3\0"+
    "\1\27\4\0\1\30\14\0\1\31\32\0\2\4\1\0"+
    "\5\4\3\0\2\4\1\32\23\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\15\4\1\33\10\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\22\4\1\34"+
    "\3\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\4\4\1\35\21\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\3\4\1\36\22\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\15\4\1\37\5\4\1\40"+
    "\2\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\1\41\25\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\10\4\1\42\15\4\2\0\1\4\1\43\5\0"+
    "\2\4\1\0\5\4\3\0\10\4\1\44\15\4\2\0"+
    "\1\4\1\45\5\0\2\4\1\0\5\4\3\0\21\4"+
    "\1\46\4\4\2\0\1\4\1\0\1\47\4\0\2\4"+
    "\1\0\5\4\3\0\1\50\25\4\2\0\1\4\2\0"+
    "\4\51\2\52\1\51\5\53\31\51\1\0\1\54\1\52"+
    "\2\51\22\0\1\55\56\0\1\43\20\0\1\43\2\0"+
    "\1\30\21\0\1\56\11\0\1\57\55\0\1\60\14\0"+
    "\2\4\1\0\5\4\3\0\2\4\1\61\23\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\20\4\1\62"+
    "\5\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\10\4\1\63\15\4\2\0\1\4\1\64\5\0\2\4"+
    "\1\0\5\4\3\0\2\4\1\65\23\4\2\0\1\4"+
    "\6\0\2\4\1\0\5\4\3\0\13\4\1\66\12\4"+
    "\2\0\1\4\6\0\2\4\1\0\5\4\3\0\4\4"+
    "\1\67\21\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\3\4\1\70\14\4\1\71\5\4\2\0\1\4"+
    "\6\0\2\4\1\0\5\4\3\0\22\4\1\72\3\4"+
    "\2\0\1\4\43\0\1\73\14\0\2\4\1\0\5\4"+
    "\3\0\22\4\1\74\3\4\2\0\1\4\43\0\1\75"+
    "\14\0\2\4\1\0\5\4\3\0\23\4\1\76\2\4"+
    "\2\0\1\4\44\0\1\77\13\0\2\4\1\0\5\4"+
    "\3\0\12\4\1\100\13\4\2\0\1\4\2\0\45\51"+
    "\1\0\1\54\7\51\2\52\1\51\5\52\3\51\26\52"+
    "\1\0\1\101\1\52\11\51\5\102\31\51\1\0\1\54"+
    "\3\51\41\0\1\103\27\0\1\104\61\0\1\105\20\0"+
    "\1\105\5\0\2\4\1\0\5\4\3\0\10\4\1\106"+
    "\15\4\2\0\1\4\1\107\5\0\2\4\1\0\5\4"+
    "\3\0\20\4\1\110\5\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\17\4\1\111\6\4\2\0\1\4"+
    "\40\0\1\112\17\0\2\4\1\0\5\4\3\0\7\4"+
    "\1\113\16\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\1\4\1\114\24\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\24\4\1\115\1\4\2\0\1\4"+
    "\6\0\2\4\1\0\5\4\3\0\20\4\1\116\5\4"+
    "\2\0\1\4\6\0\2\4\1\0\5\4\3\0\1\117"+
    "\25\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\10\4\1\120\15\4\2\0\1\4\1\121\30\0\1\121"+
    "\20\0\1\121\5\0\2\4\1\0\5\4\3\0\23\4"+
    "\1\122\2\4\2\0\1\4\44\0\1\123\13\0\2\4"+
    "\1\0\5\4\3\0\1\124\25\4\2\0\1\4\21\0"+
    "\1\125\36\0\2\4\1\0\5\4\3\0\15\4\1\126"+
    "\10\4\2\0\1\4\2\0\7\51\5\127\31\51\1\0"+
    "\1\54\3\51\27\0\1\130\20\0\1\130\40\0\1\131"+
    "\50\0\1\132\17\0\2\4\1\0\5\4\3\0\15\4"+
    "\1\133\10\4\2\0\1\4\36\0\1\134\21\0\2\4"+
    "\1\0\5\4\3\0\1\135\25\4\2\0\1\4\6\0"+
    "\2\4\1\0\5\4\3\0\23\4\1\136\2\4\2\0"+
    "\1\4\44\0\1\137\13\0\2\4\1\0\5\4\3\0"+
    "\1\140\25\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\20\4\1\141\5\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\1\142\14\4\1\143\10\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\4\4\1\144"+
    "\21\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\13\4\1\145\12\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\15\4\1\146\10\4\2\0\1\4\36\0"+
    "\1\147\21\0\2\4\1\0\5\4\3\0\12\4\1\150"+
    "\13\4\2\0\1\4\33\0\1\151\24\0\2\4\1\0"+
    "\5\4\3\0\20\4\1\152\5\4\2\0\1\4\41\0"+
    "\1\153\16\0\2\4\1\0\5\4\3\0\20\4\1\154"+
    "\5\4\2\0\1\4\2\0\7\51\5\155\31\51\1\0"+
    "\1\54\3\51\36\0\1\156\32\0\1\157\74\0\1\160"+
    "\13\0\2\4\1\0\5\4\3\0\14\4\1\161\11\4"+
    "\2\0\1\4\35\0\1\162\22\0\2\4\1\0\5\4"+
    "\3\0\20\4\1\163\5\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\4\4\1\164\21\4\2\0\1\4"+
    "\25\0\1\165\32\0\2\4\1\0\5\4\3\0\26\4"+
    "\2\0\1\166\6\0\2\4\1\0\5\4\3\0\4\4"+
    "\1\167\21\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\26\4\2\0\1\170\6\0\2\4\1\0\5\4"+
    "\3\0\26\4\2\0\1\171\6\0\2\4\1\0\5\4"+
    "\3\0\4\4\1\172\21\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\15\4\1\173\10\4\2\0\1\4"+
    "\36\0\1\174\21\0\2\4\1\0\5\4\3\0\10\4"+
    "\1\175\15\4\2\0\1\4\1\176\30\0\1\176\20\0"+
    "\1\176\1\0\5\51\1\177\37\51\1\0\1\54\3\51"+
    "\42\0\1\200\41\0\1\201\42\0\1\202\32\0\2\4"+
    "\1\0\5\4\3\0\26\4\2\0\1\203\6\0\2\4"+
    "\1\0\5\4\3\0\22\4\1\204\3\4\2\0\1\4"+
    "\43\0\1\205\14\0\2\4\1\0\5\4\3\0\2\4"+
    "\1\206\10\4\1\207\12\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\16\4\1\210\7\4\2\0\1\4"+
    "\6\0\2\4\1\0\5\4\3\0\21\4\1\211\4\4"+
    "\2\0\1\4\1\0\1\212\4\0\2\4\1\0\5\4"+
    "\3\0\22\4\1\213\3\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\15\4\1\214\10\4\2\0\1\4"+
    "\36\0\1\215\15\0\7\51\1\216\1\217\34\51\1\0"+
    "\1\54\3\51\23\0\1\220\51\0\1\221\67\0\1\222"+
    "\14\0\2\4\1\0\5\4\3\0\21\4\1\223\4\4"+
    "\2\0\1\4\1\0\1\224\4\0\2\4\1\0\5\4"+
    "\3\0\1\225\25\4\2\0\1\4\21\0\1\226\36\0"+
    "\2\4\1\0\5\4\3\0\20\4\1\227\5\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\15\4\1\230"+
    "\10\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\1\231\25\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\10\4\1\232\15\4\2\0\1\4\1\233\30\0"+
    "\1\233\20\0\1\233\5\0\2\4\1\0\5\4\3\0"+
    "\20\4\1\234\5\4\2\0\1\4\6\0\2\4\1\0"+
    "\5\4\3\0\26\4\2\0\1\235\51\0\1\236\2\0"+
    "\10\51\4\237\31\51\1\0\1\54\12\51\3\237\33\51"+
    "\1\0\1\54\3\51\41\0\1\240\51\0\1\241\27\0"+
    "\1\242\36\0\2\4\1\0\5\4\3\0\10\4\1\243"+
    "\15\4\2\0\1\4\1\244\30\0\1\244\20\0\1\244"+
    "\5\0\2\4\1\0\5\4\3\0\4\4\1\245\21\4"+
    "\2\0\1\4\6\0\2\4\1\0\5\4\3\0\3\4"+
    "\1\246\22\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\6\4\1\247\17\4\2\0\1\4\6\0\2\4"+
    "\1\0\5\4\3\0\22\4\1\250\3\4\2\0\1\4"+
    "\43\0\1\251\14\0\2\4\1\0\5\4\3\0\15\4"+
    "\1\252\10\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\2\4\1\253\10\4\1\254\12\4\2\0\1\4"+
    "\23\0\1\255\10\0\1\256\17\0\5\51\1\257\37\51"+
    "\1\0\1\54\3\51\17\0\1\260\71\0\1\261\52\0"+
    "\1\262\10\0\1\262\4\0\2\4\1\0\5\4\3\0"+
    "\22\4\1\263\3\4\2\0\1\4\43\0\1\264\14\0"+
    "\2\4\1\0\5\4\3\0\1\265\25\4\2\0\1\4"+
    "\6\0\2\4\1\0\5\4\3\0\10\4\1\266\15\4"+
    "\2\0\1\4\1\267\5\0\2\4\1\0\5\4\3\0"+
    "\10\4\1\270\15\4\2\0\1\4\1\271\5\0\2\4"+
    "\1\0\5\4\3\0\10\4\1\272\15\4\2\0\1\4"+
    "\1\273\30\0\1\273\20\0\1\273\5\0\2\4\1\0"+
    "\5\4\3\0\21\4\1\274\4\4\2\0\1\4\1\0"+
    "\1\275\4\0\2\4\1\0\5\4\3\0\20\4\1\276"+
    "\5\4\2\0\1\4\6\0\2\4\1\0\5\4\3\0"+
    "\15\4\1\277\10\4\2\0\1\4\41\0\1\300\46\0"+
    "\1\301\15\0\7\51\3\302\1\303\32\51\1\0\1\54"+
    "\3\51\40\0\1\304\10\0\1\304\34\0\1\305\16\0"+
    "\1\262\14\0\1\306\37\0\2\4\1\0\5\4\3\0"+
    "\10\4\1\307\15\4\2\0\1\4\1\310\30\0\1\310"+
    "\20\0\1\310\5\0\2\4\1\0\5\4\3\0\2\4"+
    "\1\311\23\4\2\0\1\4\6\0\2\4\1\0\5\4"+
    "\3\0\5\4\1\312\20\4\2\0\1\4\26\0\1\313"+
    "\31\0\2\4\1\0\5\4\3\0\14\4\1\314\11\4"+
    "\2\0\1\4\35\0\1\315\22\0\2\4\1\0\5\4"+
    "\3\0\15\4\1\316\10\4\2\0\1\4\36\0\1\317"+
    "\21\0\2\4\1\0\5\4\3\0\4\4\1\320\21\4"+
    "\2\0\1\4\6\0\2\4\1\0\5\4\3\0\3\4"+
    "\1\321\22\4\2\0\1\4\25\0\1\322\50\0\1\323"+
    "\27\0\10\51\4\324\31\51\1\0\1\54\12\51\2\324"+
    "\34\51\1\0\1\54\3\51\1\0\1\304\14\0\1\325"+
    "\73\0\1\326\10\0\1\326\4\0\2\4\1\0\5\4"+
    "\3\0\15\4\1\327\10\4\2\0\1\4\36\0\1\330"+
    "\21\0\2\4\1\0\5\4\3\0\10\4\1\331\15\4"+
    "\2\0\1\4\1\332\5\0\2\4\1\0\5\4\3\0"+
    "\10\4\1\333\15\4\2\0\1\4\1\334\30\0\1\334"+
    "\20\0\1\334\5\0\2\4\1\0\5\4\3\0\1\335"+
    "\25\4\2\0\1\4\21\0\1\336\36\0\2\4\1\0"+
    "\5\4\3\0\26\4\2\0\1\337\51\0\1\340\6\0"+
    "\2\4\1\0\5\4\3\0\1\341\25\4\2\0\1\4"+
    "\6\0\2\4\1\0\5\4\3\0\10\4\1\342\15\4"+
    "\2\0\1\4\1\343\20\0\1\344\61\0\1\343\20\0"+
    "\1\343\1\0\45\51\1\0\1\345\3\51\1\0\1\326"+
    "\14\0\1\346\37\0\2\4\1\0\5\4\3\0\26\4"+
    "\2\0\1\347\51\0\1\350\6\0\2\4\1\0\5\4"+
    "\3\0\15\4\1\351\10\4\2\0\1\4\36\0\1\352"+
    "\21\0\2\4\1\0\5\4\3\0\2\4\1\353\23\4"+
    "\2\0\1\4\23\0\1\354\34\0\2\4\1\0\5\4"+
    "\3\0\25\4\1\355\2\0\1\4\46\0\1\356\11\0"+
    "\2\4\1\0\5\4\3\0\2\4\1\357\23\4\2\0"+
    "\1\4\6\0\2\4\1\0\5\4\3\0\5\4\1\360"+
    "\20\4\2\0\1\4\26\0\1\361\46\0\1\362\34\0"+
    "\2\4\1\0\5\4\3\0\25\4\1\363\2\0\1\4"+
    "\46\0\1\364\11\0\2\4\1\0\5\4\3\0\14\4"+
    "\1\365\11\4\2\0\1\4\35\0\1\366\22\0\2\4"+
    "\1\0\5\4\3\0\1\367\25\4\2\0\1\4\21\0"+
    "\1\370\36\0\2\4\1\0\5\4\3\0\4\4\1\371"+
    "\21\4\2\0\1\4\25\0\1\372\32\0\2\4\1\0"+
    "\5\4\3\0\10\4\1\373\15\4\2\0\1\4\1\374"+
    "\5\0\2\4\1\0\5\4\3\0\10\4\1\375\15\4"+
    "\2\0\1\4\1\376\30\0\1\376\20\0\1\376\30\0"+
    "\1\374\20\0\1\374\5\0\2\4\1\0\5\4\3\0"+
    "\4\4\1\377\21\4\2\0\1\4\25\0\1\u0100\32\0"+
    "\2\4\1\0\5\4\3\0\2\4\1\u0101\23\4\2\0"+
    "\1\4\23\0\1\u0102\34\0\2\4\1\0\5\4\3\0"+
    "\1\4\1\u0103\24\4\2\0\1\4\22\0\1\u0104\35\0"+
    "\2\4\1\0\5\4\3\0\15\4\1\u0105\10\4\2\0"+
    "\1\4\36\0\1\u0106\21\0\2\4\1\0\5\4\3\0"+
    "\2\4\1\u0107\23\4\2\0\1\4\23\0\1\u0108\34\0"+
    "\2\4\1\0\5\4\3\0\1\4\1\u0109\24\4\2\0"+
    "\1\4\22\0\1\u010a\35\0\2\4\1\0\5\4\3\0"+
    "\10\4\1\u010b\15\4\2\0\1\4\1\u010c\30\0\1\u010c"+
    "\20\0\1\u010c\5\0\2\4\1\0\5\4\3\0\14\4"+
    "\1\u010d\11\4\2\0\1\4\35\0\1\u010e\22\0\2\4"+
    "\1\0\5\4\3\0\1\u010f\25\4\2\0\1\4\21\0"+
    "\1\u0110\36\0\2\4\1\0\5\4\3\0\15\4\1\u0111"+
    "\10\4\2\0\1\4\36\0\1\u0112\21\0\2\4\1\0"+
    "\5\4\3\0\2\4\1\u0113\23\4\2\0\1\4\23\0"+
    "\1\u0114\34\0\2\4\1\0\5\4\3\0\14\4\1\u0115"+
    "\11\4\2\0\1\4\35\0\1\u0116\22\0\2\4\1\0"+
    "\5\4\3\0\10\4\1\u0117\15\4\2\0\1\4\1\u0118"+
    "\30\0\1\u0118\20\0\1\u0118\5\0\2\4\1\0\5\4"+
    "\3\0\15\4\1\u0119\10\4\2\0\1\4\36\0\1\u011a"+
    "\21\0\2\4\1\0\5\4\3\0\14\4\1\u011b\11\4"+
    "\2\0\1\4\35\0\1\u011c\16\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10248];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\2\11\13\1\6\0"+
    "\11\1\1\0\1\1\1\0\1\1\1\0\1\1\3\0"+
    "\2\11\3\0\3\1\1\0\6\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\4\0\1\1\1\0\2\1"+
    "\1\0\6\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\4\0\1\1\1\0\2\1\1\0\7\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\4\0\1\1\1\11\2\1"+
    "\1\0\6\1\1\11\1\1\5\0\2\1\1\0\4\1"+
    "\1\0\2\1\6\0\1\1\1\0\1\1\1\11\4\1"+
    "\1\0\2\1\5\0\1\1\1\0\4\1\1\0\3\1"+
    "\6\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\2\1\6\0\1\11\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\2\1\3\0"+
    "\1\11\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\2\1\2\0\2\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\2\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerXML(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbol(ParserXMLSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* ignore */
            }
          // fall through
          case 31: break;
          case 2:
            { return new Symbol(ParserXMLSym.COMILLA);
            }
          // fall through
          case 32: break;
          case 3:
            { return symbol(ParserXMLSym.DATOETIQUETA, yytext());
            }
          // fall through
          case 33: break;
          case 4:
            { return new Symbol(ParserXMLSym.DIAGONAL);
            }
          // fall through
          case 34: break;
          case 5:
            { return new Symbol(ParserXMLSym.MENOR);
            }
          // fall through
          case 35: break;
          case 6:
            { return new Symbol(ParserXMLSym.IGUAL);
            }
          // fall through
          case 36: break;
          case 7:
            { return new Symbol(ParserXMLSym.MAYOR);
            }
          // fall through
          case 37: break;
          case 8:
            { return new Symbol(ParserXMLSym.IDPARAM);
            }
          // fall through
          case 38: break;
          case 9:
            { return symbol(ParserXMLSym.LITERAL, yytext());
            }
          // fall through
          case 39: break;
          case 10:
            { return symbol(ParserXMLSym.VALORID, yytext());
            }
          // fall through
          case 40: break;
          case 11:
            { return new Symbol(ParserXMLSym.PADRE);
            }
          // fall through
          case 41: break;
          case 12:
            { return new Symbol(ParserXMLSym.SITIO);
            }
          // fall through
          case 42: break;
          case 13:
            { return new Symbol(ParserXMLSym.VALORETIQUETA);
            }
          // fall through
          case 43: break;
          case 14:
            { return new Symbol(ParserXMLSym.ACCION);
            }
          // fall through
          case 44: break;
          case 15:
            { return new Symbol(ParserXMLSym.NOMBRE);
            }
          // fall through
          case 45: break;
          case 16:
            { return new Symbol(ParserXMLSym.TITULO);
            }
          // fall through
          case 46: break;
          case 17:
            { return new Symbol(ParserXMLSym.ETIQUETA);
            }
          // fall through
          case 47: break;
          case 18:
            { return new Symbol(ParserXMLSym.PARAMETRO);
            }
          // fall through
          case 48: break;
          case 19:
            { return new Symbol(ParserXMLSym.PARAMETROS);
            }
          // fall through
          case 49: break;
          case 20:
            { return new Symbol(ParserXMLSym.CONTENIDOETIQUETA);
            }
          // fall through
          case 50: break;
          case 21:
            { return new Symbol(ParserXMLSym.ETIQUETASCIERRE);
            }
          // fall through
          case 51: break;
          case 22:
            { return new Symbol(ParserXMLSym.NUEVAPAGINA);
            }
          // fall through
          case 52: break;
          case 23:
            { return symbol(ParserXMLSym.VALORFECHA, yytext());
            }
          // fall through
          case 53: break;
          case 24:
            { return new Symbol(ParserXMLSym.PARAMETROSCIERRE);
            }
          // fall through
          case 54: break;
          case 25:
            { return new Symbol(ParserXMLSym.FECHACREACION);
            }
          // fall through
          case 55: break;
          case 26:
            { return new Symbol(ParserXMLSym.CREARSITIO);
            }
          // fall through
          case 56: break;
          case 27:
            { return new Symbol(ParserXMLSym.BORRARSITIO);
            }
          // fall through
          case 57: break;
          case 28:
            { return new Symbol(ParserXMLSym.USUARIOCREACION);
            }
          // fall through
          case 58: break;
          case 29:
            { return new Symbol(ParserXMLSym.FECHAMODIFICACION);
            }
          // fall through
          case 59: break;
          case 30:
            { return new Symbol(ParserXMLSym.USUARIOMODIFICACION);
            }
          // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
