/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.rudyreyes.manejadorweb.vista;

import com.rudyreyes.manejadorweb.LexerXML;
import com.rudyreyes.manejadorweb.ManejadorWeb;
import com.rudyreyes.manejadorweb.ParserSQ;
import com.rudyreyes.manejadorweb.ParserXML;
import com.rudyreyes.manejadorweb.lexerSQ;
import com.rudyreyes.manejadorweb.modelo.componente.Componente;
import com.rudyreyes.manejadorweb.modelo.componente.EliminarComponente;
import com.rudyreyes.manejadorweb.modelo.componente.ModificarComponentes;
import com.rudyreyes.manejadorweb.modelo.consultas.ConsultaComponentes;
import com.rudyreyes.manejadorweb.modelo.consultas.PaginasPopulares;
import com.rudyreyes.manejadorweb.modelo.consultas.VisitasPagina;
import com.rudyreyes.manejadorweb.modelo.consultas.VisitasSitio;
import com.rudyreyes.manejadorweb.modelo.paginaweb.BorrarPaginaWeb;
import com.rudyreyes.manejadorweb.modelo.paginaweb.ModificarPagina;
import com.rudyreyes.manejadorweb.modelo.paginaweb.PaginaWeb;
import com.rudyreyes.manejadorweb.modelo.sitioweb.BorrarSitioWeb;
import com.rudyreyes.manejadorweb.modelo.sitioweb.SitioWeb;
import com.rudyreyes.manejadorweb.modelo.util.AgregarYEliminarComponentes;
import com.rudyreyes.manejadorweb.modelo.util.Consultas;
import com.rudyreyes.manejadorweb.modelo.util.EscribirPaginasWeb;
import com.rudyreyes.manejadorweb.modelo.util.EscribirSitiosWeb;
import com.rudyreyes.manejadorweb.modelo.util.GenerarArchivos;
import com.rudyreyes.manejadorweb.modelo.util.ImprimirDatosConsola;
import com.rudyreyes.manejadorweb.modelo.util.LevantarServidor;
import com.rudyreyes.manejadorweb.modelo.util.VerificacionesHtml;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author rudyo
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    List<SitioWeb> sitios = new ArrayList<>();
    List<PaginaWeb> paginas = new ArrayList<>();
    private Map<String, Integer> visitasPorPagina = new HashMap<>();
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        GenerarArchivos.generarCarpeta();
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaXML = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        subirArchivo = new javax.swing.JButton();
        generarPaginas = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaErrores = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        areaConsultas = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        verConsultas = new javax.swing.JButton();
        limpiarArea = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Generar Paginas");

        jPanel1.setBackground(new java.awt.Color(153, 255, 204));

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("APLICACION CLIENTE");

        areaXML.setColumns(20);
        areaXML.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        areaXML.setRows(5);
        jScrollPane2.setViewportView(areaXML);

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Codigo XML");

        subirArchivo.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        subirArchivo.setText("Subir Archivo");
        subirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subirArchivoActionPerformed(evt);
            }
        });

        generarPaginas.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        generarPaginas.setText("Generar Paginas");
        generarPaginas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarPaginasActionPerformed(evt);
            }
        });

        areaErrores.setColumns(20);
        areaErrores.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        areaErrores.setRows(5);
        jScrollPane1.setViewportView(areaErrores);

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Area de Respuestas y Errores del sistema");

        areaConsultas.setColumns(20);
        areaConsultas.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        areaConsultas.setRows(5);
        jScrollPane3.setViewportView(areaConsultas);

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Area de Consultas");

        verConsultas.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        verConsultas.setText("Ver Consultas");
        verConsultas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verConsultasActionPerformed(evt);
            }
        });

        limpiarArea.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        limpiarArea.setText("Limpiar Area");
        limpiarArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarAreaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(subirArchivo)
                        .addGap(30, 30, 30)
                        .addComponent(limpiarArea)
                        .addGap(31, 31, 31)
                        .addComponent(generarPaginas, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(146, 146, 146)
                                .addComponent(verConsultas)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subirArchivo)
                    .addComponent(limpiarArea)
                    .addComponent(generarPaginas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(verConsultas)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generarPaginasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarPaginasActionPerformed
        String entradaXML = areaXML.getText();
        areaErrores.setText("");
        if (entradaXML != null) {
            try {
                LevantarServidor.pararServidor();
            } catch (Exception ex) {
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            LexerXML lexer = new LexerXML(new StringReader(entradaXML));
            ParserXML parser = new ParserXML(lexer);

            try {
                parser.parse();
                List<Object> acciones = new ArrayList<>(parser.obtenerAcciones());

                for (Object objetos : acciones) {

                    //AGREGAR COMPONENTES
                    if (objetos instanceof Componente) {
                        Componente nuevoComponente = (Componente) objetos;
                        if (nuevoComponente != null) {
                            nuevoComponente.imprimirComponentes();
                            if (VerificacionesHtml.verficarAgregarComponente(nuevoComponente)) {
                                boolean encontrado = AgregarYEliminarComponentes.agregarComponente(paginas, nuevoComponente);
                                if (encontrado) {
                                    EscribirPaginasWeb.generarUnaPaginaWebID(paginas, nuevoComponente.getIdPagina());
                                    ImprimirDatosConsola.imprimirPaginasWeb(paginas);
                                } else {
                                    areaErrores.append("La pagina para agregar el componente no existe\n");
                                }
                            } else {
                                areaErrores.append("Inserte el ID, Pagina o Clase del componente a agregar\n");
                            }
                        }

                    }
                    
                    //MODIFICAR COMPONENTES
                    else if (objetos instanceof ModificarComponentes) {
                        ModificarComponentes nuevoComponente = (ModificarComponentes) objetos;
                        if (nuevoComponente != null) {
                            nuevoComponente.imprimirComponentes();
                            //LISTO
                            if(VerificacionesHtml.verificarModificarComponente(nuevoComponente)){
                                boolean encontrado =AgregarYEliminarComponentes.modificarComponente(paginas, nuevoComponente);
                                if (encontrado) {
                                    EscribirPaginasWeb.generarUnaPaginaWebID(paginas, nuevoComponente.getIdPagina());
                                    ImprimirDatosConsola.imprimirPaginasWeb(paginas);
                                } else {
                                    areaErrores.append("La pagina para agregar el componente no existe\n");
                                }
                            } else {
                                areaErrores.append("Inserte el ID, Pagina o Clase del componente a agregar\n");
                            }
                        }

                    } 
                    
                    //ELIMINAR COMPONENTES
                    else if (objetos instanceof EliminarComponente) {
                        EliminarComponente nuevoComponente = (EliminarComponente) objetos;
                        if (nuevoComponente != null) {
                            nuevoComponente.imprimirComponentes();
                            //HACER VERIFICACIONES
                            //YA ESTA MANEJADO
                            if(VerificacionesHtml.verificarEliminarComponente(nuevoComponente)){
                                boolean encontrado =AgregarYEliminarComponentes.eliminarComponente(paginas, nuevoComponente);
                                if (encontrado) {
                                    EscribirPaginasWeb.generarUnaPaginaWebID(paginas, nuevoComponente.getIdPagina());
                                    ImprimirDatosConsola.imprimirPaginasWeb(paginas);
                                } else {
                                    areaErrores.append("La pagina para eliminar el componente no existe\n");
                                }
                            } else {
                                areaErrores.append("Inserte el ID, Pagina del componente a eliminar\n");
                            }
                        }

                    }
                    
                    //NUEVA PAGINA WEB
                    else if (objetos instanceof PaginaWeb) {
                        PaginaWeb nuevoComponente = (PaginaWeb) objetos;
                        if (nuevoComponente != null) {
                            nuevoComponente.imprimirPagina();
                            if (VerificacionesHtml.verificarPaginaWeb(nuevoComponente)) {
                                paginas.add(nuevoComponente);
                                String contenido = EscribirPaginasWeb.generarContenidoHTMLPagina(nuevoComponente, paginas);
                                GenerarArchivos.escribirArchivo(contenido, nuevoComponente.getIdPagina());
                                EscribirSitiosWeb.agregarPaginaASitio(sitios, nuevoComponente);
                                EscribirPaginasWeb.generarTodasLasPaginasHTML(paginas);
                                EscribirSitiosWeb.verificarPaginasHijas(sitios, paginas);
                            } else {
                                areaErrores.append("Inserte el ID o el Sitio de la pagina web que desea crear\n");
                            }

                            ImprimirDatosConsola.imprimirPaginasWeb(paginas);
                        }

                    }
                    
                    //BORRAR PAGINA WEB
                    else if (objetos instanceof BorrarPaginaWeb) {
                        BorrarPaginaWeb nuevoComponente = (BorrarPaginaWeb) objetos;
                        if (nuevoComponente != null) {
                            nuevoComponente.imprimirBorrarPagina();
                            if (VerificacionesHtml.borrarPaginaWeb(nuevoComponente)) {
                                boolean encontrado = AgregarYEliminarComponentes.borrarPaginaWeb(paginas, nuevoComponente);
                                if(encontrado){
                                    GenerarArchivos.eliminarArchivo(nuevoComponente.getIdPagina());
                                    EscribirSitiosWeb.eliminarPaginaDeSitio(sitios, nuevoComponente);
                                    EscribirPaginasWeb.generarTodasLasPaginasHTML(paginas);
                                    EscribirSitiosWeb.verificarPaginasHijas(sitios, paginas);
                                }else{
                                    areaErrores.setText("Pagina no encontrada\n");
                                }
                            } else {
                                areaErrores.setText("Inserte el ID de la pagina web que desea borrar\n");
                            }
                            ImprimirDatosConsola.imprimirPaginasWeb(paginas);
                        }
                    }
                    
                    //MODIFICAR PAGINA WEB
                    else if (objetos instanceof ModificarPagina) {
                        ModificarPagina nuevoComponente = (ModificarPagina) objetos;
                        if (nuevoComponente != null) {
                            nuevoComponente.imprimirPagina();
                            if (VerificacionesHtml.modificarPaginaWeb(nuevoComponente)) {
                                AgregarYEliminarComponentes.modificarPaginaWeb(paginas, nuevoComponente);
                                EscribirPaginasWeb.generarUnaPaginaWebID(paginas, nuevoComponente.getIdPagina());
                            }
                        }

                        ImprimirDatosConsola.imprimirPaginasWeb(paginas);

                    }
                    
                    //SITIO WEB
                    else if (objetos instanceof SitioWeb) {
                        SitioWeb nuevoComponente = (SitioWeb) objetos;
                        if (nuevoComponente != null) {
                            nuevoComponente.imprimirSitio();
                            if (VerificacionesHtml.verificarSitiosWeb(nuevoComponente)) {
                                sitios.add(nuevoComponente);
                                String contenido = EscribirSitiosWeb.generarContenidoHTMLSitio(nuevoComponente.getIdSitio(), "Sitio Web " + nuevoComponente.getIdSitio());
                                GenerarArchivos.escribirArchivo(contenido, nuevoComponente.getIdSitio());
                                //GENERAR INDEX
                                EscribirSitiosWeb.generarIndex(sitios);
                            } else {
                                areaErrores.append("Inserte el ID del sitio web que desea crear\n");
                            }
                        }
                        ImprimirDatosConsola.imprimirSitiosWeb(sitios);

                    }
                    
                    //BORRAR SITIO WEB
                    else if (objetos instanceof BorrarSitioWeb) {
                        BorrarSitioWeb nuevoComponente = (BorrarSitioWeb) objetos;
                        if (nuevoComponente != null) {
                            nuevoComponente.imprimirBorrarSitio();
                            if (VerificacionesHtml.verificarBorrarSitio(nuevoComponente)) {
                                boolean encontrado = AgregarYEliminarComponentes.borrarSitioWeb(sitios, nuevoComponente);
                                //DEBERIA REMOVER TAMBIEN EL ARCHIVO HTML
                                
                                if(encontrado){
                                    GenerarArchivos.eliminarArchivo(nuevoComponente.getIdSitio());
                                    //GENERAR INDEX
                                    EscribirSitiosWeb.generarIndex(sitios);
                                }else{
                                    areaErrores.setText("Sitio no encontrada\n");
                                }
                            } else {
                                areaErrores.append("Inserte el ID del sitio web que desea borrar\n");
                            }
                        }
                        
                        ImprimirDatosConsola.imprimirSitiosWeb(sitios);

                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(ManejadorWeb.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            parser.limpiarAcciones();
            
            try {
                // Crear un hilo para levantar el servidor
                Thread servidorThread = new Thread(() -> {
                    try {
                        LevantarServidor.levantarServidor();
                    } catch (Exception ex) {
                        Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                });
                servidorThread.start(); // Iniciar el hilo del servidor

                // Esperar un momento para asegurarse de que el servidor se haya iniciado correctamente
                Thread.sleep(1000); // Puedes ajustar este tiempo según sea necesario

                // Abrir la página en el navegador
                String url = "http://localhost:8080/indexSitiosWeb.html";
                LevantarServidor.abrirPagina(url);

                // Imprimir las visitas después de un tiempo
                Thread.sleep(5000); // Esperar 5 segundos (puedes ajustar este tiempo)
                
            } catch (Exception ex) {
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_generarPaginasActionPerformed

    private void verConsultasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verConsultasActionPerformed
        String entrada = areaConsultas.getText();
        areaErrores.setText("");
        lexerSQ lexer = new lexerSQ(new StringReader(entrada));
        ParserSQ parser = new ParserSQ(lexer);
        
        try {
            parser.parse();
            
            List<Object> consultas = new ArrayList<>(parser.obtenerConsultas());
            
            for (Object objeto : consultas) {
                if (objeto instanceof ConsultaComponentes) {
                    ConsultaComponentes consulta = (ConsultaComponentes)objeto;
                    String resultado = Consultas.componentesPagina(paginas, consulta);
                    areaErrores.append(resultado);
                    consulta.imprimirDatos();
                
                }else if(objeto instanceof PaginasPopulares){
                    PaginasPopulares consulta = (PaginasPopulares)objeto;
                    visitasPorPagina = LevantarServidor.obtenerTodasLasVisitas();
                    
                    List<Map.Entry<String, Integer>> lista = new LinkedList<>(visitasPorPagina.entrySet());

                    // Ordenar la lista en base a los valores (en orden descendente)
                    Collections.sort(lista, new Comparator<Map.Entry<String, Integer>>() {
                        @Override
                        public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
                            return o2.getValue().compareTo(o1.getValue());
                        }
                    });
                    
                    String resultado = Consultas.paginasPopulares(lista, sitios, consulta.getIdPagina());
                    areaErrores.append(resultado);
                    consulta.imprimirDatos();
                
                }else if(objeto instanceof VisitasPagina){
                    VisitasPagina consulta = (VisitasPagina)objeto;
                    visitasPorPagina = LevantarServidor.obtenerTodasLasVisitas();
                    
                    areaErrores.append("Visitas de las Paginas\n");
                    for(String cs: consulta.getIdPaginas()){
                        areaErrores.append("Pagina "+cs +" Visitas: "+LevantarServidor.obtenerVisitasPorPagina(cs)+" \n");
                    }
                    
                    
                    consulta.imprimirDatos();
                    
                
                }else if(objeto instanceof VisitasSitio){
                    VisitasSitio consulta = (VisitasSitio)objeto;
                    areaErrores.append("Visitas de los Sitios Web\n");
                    
                    for(String cs: consulta.getIdSitios()){
                        for(SitioWeb sitio: sitios){
                            int cant=0;
                            if(sitio.getIdSitio().equals(cs)){
                                for(String pagina: sitio.getPaginasWeb()){
                                    cant += LevantarServidor.obtenerVisitasPorPagina(pagina);
                                }
                                
                                areaErrores.append("El sitio "+sitio.getIdSitio()+" tiene un total de visitas: "+cant+"\n");
                            }
                        }
                    }
                    consulta.imprimirDatos();
                }
                
            }
        } catch (Exception ex) {
            Logger.getLogger(ManejadorWeb.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_verConsultasActionPerformed

    private void limpiarAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarAreaActionPerformed
        areaXML.setText("");
    }//GEN-LAST:event_limpiarAreaActionPerformed

    private void subirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subirArchivoActionPerformed
        //Creamos el objeto JFileChooser
        JFileChooser fc = new JFileChooser();

//Creamos el filtro//Archivos de texto (*.txt, *.py)", "txt", "py"
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de texto (*.txt, *.py, *.xml)", "txt", "py", "xml");

//Le indicamos el filtro
        fc.setFileFilter(filtro);
//Abrimos la ventana, guardamos la opcion seleccionada por el usuario
        int seleccion = fc.showOpenDialog(this);

//Si el usuario, pincha en aceptar
        if (seleccion == JFileChooser.APPROVE_OPTION) {

            //Seleccionamos el fichero
            File fichero = fc.getSelectedFile();

            //Ecribe la ruta del fichero seleccionado en el campo de texto
            //textField.setText(fichero.getAbsolutePath());
            try (FileReader fr = new FileReader(fichero)) {
                String cadena = "";
                int valor = fr.read();
                while (valor != -1) {
                    cadena = cadena + (char) valor;
                    valor = fr.read();
                }
                areaXML.setText(cadena);
            } catch (IOException e1) {
                e1.printStackTrace();
            }

        }
    }//GEN-LAST:event_subirArchivoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaConsultas;
    private javax.swing.JTextArea areaErrores;
    private javax.swing.JTextArea areaXML;
    private javax.swing.JButton generarPaginas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton limpiarArea;
    private javax.swing.JButton subirArchivo;
    private javax.swing.JButton verConsultas;
    // End of variables declaration//GEN-END:variables
}
